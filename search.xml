<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python学习第3章-使用字符串</title>
      <link href="/2019/02/13/python-xue-xi-di-3-zhang-shi-yong-zi-fu-chuan/"/>
      <url>/2019/02/13/python-xue-xi-di-3-zhang-shi-yong-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-使用字符串"><a href="#第三章-使用字符串" class="headerlink" title="第三章-使用字符串"></a>第三章-使用字符串</h1><p>本章将介绍如何使用字符串来设置其他值的格式（比如便于打印），并大致了解字符串方法可完成的重要任务，如拆分、合并和查找等。</p><h2 id="3-1-字符串基本操作"><a href="#3-1-字符串基本操作" class="headerlink" title="3.1 字符串基本操作"></a>3.1 字符串基本操作</h2><p>所有标准序列操作（索引、切片、乘法、成员资格审查、长度、最小值、最大值）都适用于字符串，但别忘了字符串是不可变的，因此所有的元素赋值和切片赋值都是非法的。</p><h2 id="3-2-设置字符串的格式：精简版"><a href="#3-2-设置字符串的格式：精简版" class="headerlink" title="3.2 设置字符串的格式：精简版"></a>3.2 设置字符串的格式：精简版</h2><p>Python新手可能不会用到所有的Python字符串格式设置选项，因此这里先介绍精简版。如果想了解详情，可参阅3.3。</p><p>Python提供了多种字符串格式设置方法：</p><ol><li>使用字符串格式设置运算符——百分号（类似于C语言）：在%左边指定一个字符串（格式字符串），并在右边指定要设置其格式的值。指定其格式的值时，可使用单个值（如字符串或数字），可使用元组（如果要设置多个值的格式），还可以使用字典（第四章），其中最常见的是元组。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token string">"Hello, %s. %s enough for ya?"</span><span class="token operator">>></span><span class="token operator">></span> values <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token string">'Hot'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">%</span> values<span class="token string">'Hello, world. Hot enough for ya?'</span><span class="token comment" spellcheck="true">##上述格式字符串%s称为转换说明符，指出了将值插入什么地方。s意味着将其转换为字符串。其他说明符号将导致其他形式的转换。例如，%.3f将值的格式设置为包含3位小数的浮点数。</span></code></pre></li><li>使用所谓的模板字符串，类似于UNIX shell的语法，旨在简化基本的格式设置机制。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> string <span class="token keyword">import</span> Template<span class="token operator">>></span><span class="token operator">></span> tmpl <span class="token operator">=</span> Template<span class="token punctuation">(</span><span class="token string">"Hello, $who! $what enough for ya?"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> tmpl<span class="token punctuation">.</span>substitute<span class="token punctuation">(</span>who<span class="token operator">=</span><span class="token string">"Mars"</span><span class="token punctuation">,</span> what<span class="token operator">=</span><span class="token string">"Dusty"</span><span class="token punctuation">)</span><span class="token string">'Hello, Mars! Dusty enough for ya?'</span><span class="token comment" spellcheck="true">##包含等号的参数称为关键字参数（第六章）。在字符串格式设置中，可将关键字参数视为一种向命名替换字段提供值的方式</span></code></pre></li><li>编写新代码时，应选择字符串方法format，它融合并强化了早期方法的优点。使用这种方法时，每个替换字符都用花括号括起，其中可能包含名称，还可能包含有关如何对相应的值进行转换和格式设置的信息。<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##在最简单的情况下，替换字段没有名称或将索引用作名称。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{}, {} and {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span> <span class="token string">"second"</span><span class="token punctuation">,</span> <span class="token string">"third"</span><span class="token punctuation">)</span><span class="token string">'first, second and third'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{0}, {1} and {2}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span> <span class="token string">"second"</span><span class="token punctuation">,</span> <span class="token string">"third"</span><span class="token punctuation">)</span><span class="token string">'first, second and third'</span><span class="token comment" spellcheck="true">##然而，索引无需像上面这样按顺序排列。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{3} {0} {2} {1} {3} {0}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"be"</span><span class="token punctuation">,</span> <span class="token string">"not"</span><span class="token punctuation">,</span> <span class="token string">"or"</span><span class="token punctuation">,</span> <span class="token string">"to"</span><span class="token punctuation">)</span><span class="token string">'to be or not to be'</span><span class="token comment" spellcheck="true">##命名字段的工作原理与你预期的完全相同。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{name} is approximately {value:.2f}."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>value<span class="token operator">=</span>pi<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"π"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##使用了格式说明符.2f，指的是包含两位小数的浮点数格式。</span><span class="token string">'π is approximately 3.14.'</span><span class="token comment" spellcheck="true">##最后，在Python中，如果变量与替换字符段同名，还可以使用一种简写，在这种情况下，可使用f字符串——在字符串前面加上f。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> math <span class="token keyword">import</span> e<span class="token operator">>></span><span class="token operator">></span> f<span class="token string">"Euler's constant is roughly {e}."</span><span class="token string">"Euler's constant is roughly 2.718281828459045."</span><span class="token comment" spellcheck="true">#在这里，创建最终的字符串时，将把替换字段e替换为变量e的值，与下面这个更加明确的表达式等价：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Euler's constant is roughly {e}."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>e<span class="token operator">=</span>e<span class="token punctuation">)</span><span class="token string">"Euler's constant is roughly 2.718281828459045."</span></code></pre><h2 id="3-3-设置字符串的格式：完整版"><a href="#3-3-设置字符串的格式：完整版" class="headerlink" title="3.3 设置字符串的格式：完整版"></a>3.3 设置字符串的格式：完整版</h2>这里的基本思想是对字符串调用方法format，并提供要设置其格式的值。字符串包含有关如何设置格式的信息，而这些信息是使用一种微型格式指定语言（mini-language）指定的。每个值都被插入字符串中，以替换用花括号括起的替换字段。要在最终结果中包括花括号，可在格式字符串中使用两个花括号（即）来指定。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{{包含花括号的示例}}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'{包含花括号的示例}'</span></code></pre>在格式字符串中，最激动人心的部分为替换字段。替换字段由如下部分组成，其中每个部分都是可选的。</li></ol><ul><li>字段名：索引或标识符，指出要设置哪个值的格式并使用结果来替换该字段。除指定值外，还可指定值的特定部分，如列表的元素。</li><li>转换标志：跟在叹号后面的单个字符。当前支持的字符包括r（表示repr）、s（表示str）和a（表示ascii）。如果你指定了转换标志，将不使用对象本身的格式设置机制，而是使用指定的函数将对象转换为字符串，再做进一步的格式设置。</li><li>格式说明符：跟在冒号后面的表达式（这种表达式是使用微型格式指定语言表示的）。格式说明符让我们能够详细地指定最终的格式，包括格式类型（如字符串、浮点数或十六进制数），字段宽度和数的精度，如何显示符号和千位分隔符，以及各种对其和填充方式。<h3 id="3-3-1-替换字段名"><a href="#3-3-1-替换字段名" class="headerlink" title="3.3.1 替换字段名"></a>3.3.1 替换字段名</h3>在最简单的情况下，只需向format提供要设置其格式的未命名参数，并在格式字符串中使用未命名字段。此时，将按顺序将字段和参数配对。你还可以给参数指定名称，这种参数将被用于相应的替换字段中。并且可以混合使用这两种方法。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{foo} {} {bar} {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> bar<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> foo<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token string">'3 1 4 2'</span><span class="token comment" spellcheck="true">##还可通过索引来指定要在哪个字段中使用相应的未命名参数，这样可不按顺序使用未命名参数：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{foo} {1} {bar} {0}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> bar<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> foo<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token string">'3 2 4 1'</span><span class="token comment" spellcheck="true">##然而，不能同时使用手工编号和自动编号，因为这样很快就会变得混乱不堪。</span></code></pre>并非只能使用提供的值本身，而是可以访问其组成部分（就像在常规Python代码中一样）。如下所示：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> math<span class="token operator">>></span><span class="token operator">></span> tmpl <span class="token operator">=</span> <span class="token string">"The {mod.__name__} module defines the value {mod.pi} for π"</span><span class="token comment" spellcheck="true">##name两端为各两个下划线</span><span class="token operator">>></span><span class="token operator">></span> tmpl<span class="token punctuation">.</span>format<span class="token punctuation">(</span>mod<span class="token operator">=</span>math<span class="token punctuation">)</span><span class="token string">'The math module defines the value 3.141592653589793 for π'</span><span class="token comment" spellcheck="true">##如你所见，可使用索引，还可以使用句点表示法来访问导入模块中的方法、属性、变量和函数（看起来很怪异的变量__name__包含指定模块中的名称）。</span></code></pre><h3 id="3-3-2-基本转换"><a href="#3-3-2-基本转换" class="headerlink" title="3.3.2 基本转换"></a>3.3.2 基本转换</h3>指定要在字段中包含的值后，就可以添加有关如何设置其格式的指令了。</li><li>首先可以提供一个转换标志。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{pi!s} {pi!r} {pi!a}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>pi<span class="token operator">=</span><span class="token string">"π"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>π <span class="token string">'π'</span> <span class="token string">'\u03c0'</span><span class="token comment" spellcheck="true">##上述三个标志（s、r和a）指定分别使用str、repr和ascii进行转换。函数str通常创建外观普通的字符串版本（这里没有对输入的字符串做任何处理）。函数repr尝试创建给定值的Python表示（这里是一个字符串字面量）。函数ascii创建只包含ASCII字符的表示。</span></code></pre></li><li>还可以指定要转换的值是那种类型，更准确地说，是要将其视为哪种类型（冒号后面使用类型说明符）。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"The number is {num}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token string">'The number is 42'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"The number is {num:f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##提供一个整数的，但将其作为小数进行处理</span><span class="token string">'The number is 42.000000'</span><span class="token comment" spellcheck="true">##也可以将其作为二进制来处理</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"The number is {num:b}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token string">'The number is 101010'</span></code></pre></li><li>完整的类型说明符清单：</li></ul><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">b</td><td style="text-align:left">将整数表示为二进制数</td></tr><tr><td style="text-align:center">c</td><td style="text-align:left">将整数解读为Unicode码点</td></tr><tr><td style="text-align:center">d</td><td style="text-align:left">将整数视为十进制数进行处理，这是整数默认使用的说明符</td></tr><tr><td style="text-align:center">e</td><td style="text-align:left">使用科学计数法来表示小数（用e来表示指数）</td></tr><tr><td style="text-align:center">E</td><td style="text-align:left">与e相同，但用E来表示指数</td></tr><tr><td style="text-align:center">f</td><td style="text-align:left">将小数表示为定点数</td></tr><tr><td style="text-align:center">F</td><td style="text-align:left">与f相同，但对于特殊值（nan和inf），使用大写表示</td></tr><tr><td style="text-align:center">g</td><td style="text-align:left">自动在定点表示法和科学计数法之间作出选择。这是默认用于小数的说明符，但在默认情况下至少有1位小数</td></tr><tr><td style="text-align:center">G</td><td style="text-align:left">与g相同，但使用大写来表示指数和特殊值</td></tr><tr><td style="text-align:center">n</td><td style="text-align:left">与g相同，但插入随区域而异的数字分隔符</td></tr><tr><td style="text-align:center">o</td><td style="text-align:left">将整数表示为八进制数</td></tr><tr><td style="text-align:center">s</td><td style="text-align:left">保持字符串的格式不变，这是默认用于字符串的说明符</td></tr><tr><td style="text-align:center">x</td><td style="text-align:left">将整数表示为十六进制数并使用小写字母</td></tr><tr><td style="text-align:center">X</td><td style="text-align:left">与x相同，但使用大写字母</td></tr><tr><td style="text-align:center">%</td><td style="text-align:left">将数表示为百分比值（乘以100，按说明符f设置格式，再在后面加上%）</td></tr></tbody></table><h3 id="3-3-3-宽度、精度和千位分隔符"><a href="#3-3-3-宽度、精度和千位分隔符" class="headerlink" title="3.3.3 宽度、精度和千位分隔符"></a>3.3.3 宽度、精度和千位分隔符</h3><p>设置浮点数（或其他更具体的小数类型）的格式时，默认在小数点后面显示6位小数，并根据需要设置字段的宽度，而不进行任何形式的填充。当然，这种默认设置可能不是我们想要的，在这种情况下，可根据需要在格式说明中指定宽度和精度。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##宽度是使用整数指定的，如下所示：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{num:10}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token string">'         3'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{name:10}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token string">'Bob       '</span><span class="token comment" spellcheck="true">#如我们所见，数和字符串的对其方式不同，对其在下节介绍。</span><span class="token comment" spellcheck="true">##精度也是使用整数指定的，但需要在它前面加上一个表示小数点的句点：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> math<span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Pi day is {pi:.2f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>pi<span class="token operator">=</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token string">'Pi day is 3.14'</span><span class="token comment" spellcheck="true">##可同时指定宽度和精度：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> math<span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{pi:10.2f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>pi<span class="token operator">=</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token string">'      3.14'</span><span class="token comment" spellcheck="true">##对于其他类型也可以指定精度（不常见）：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{:.5}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"Guido van Rossum"</span><span class="token punctuation">)</span><span class="token string">'Guido'</span><span class="token comment" spellcheck="true">##最后，可以使用逗号来指出要添加的千位分隔符：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'One googol is {:,}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token string">'One googol is 10,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000'</span><span class="token comment" spellcheck="true">##同时指定其他格式设置元素时，这个逗号应放在宽度和表示精度的句点之间。</span></code></pre><h3 id="3-3-4-符号、对齐和用0填充"><a href="#3-3-4-符号、对齐和用0填充" class="headerlink" title="3.3.4 符号、对齐和用0填充"></a>3.3.4 符号、对齐和用0填充</h3><p>有很多用于设置数字格式的机制，便于打印整齐的表格。在大多数情况下，只需指定宽度和精度，但包含负数后，原本漂亮的输出可能不再漂亮。另外，正如你所看到的，字符串和数的默认对其方式不同。在一栏中同时包含字符串和数时，就会去修改默认的对其方式。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##在指定宽度和精度的数前面，可添加一个标志，这各标志可以是零、加号、减号或空格，其中零表示用0来填充数字。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> math<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'{:010.2f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token string">'0000003.14'</span><span class="token comment" spellcheck="true">##要指定左对齐、右对齐和居中，可分别使用&lt;、>和^。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:&lt;10.2f}\n{0:^10.2f}\n{0:>10.2f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3.14</span>         <span class="token number">3.14</span>         <span class="token number">3.14</span><span class="token comment" spellcheck="true">##可以使用填充字符来扩充对齐说明符，这样将使用指定的字符而不是默认的空格来填充。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{:$^15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">" WIN BIG "</span><span class="token punctuation">)</span><span class="token string">'$$$ WIN BIG $$$'</span><span class="token comment" spellcheck="true">##还有更具体的说明符=，它指定将填充字符放在符号和数字之间。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:10.2f}\n{1:10.2f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token operator">-</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token number">3.14</span>     <span class="token operator">-</span><span class="token number">3.14</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:10.2f}\n{1:=10.2f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token operator">-</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token number">3.14</span><span class="token operator">-</span>     <span class="token number">3.14</span><span class="token comment" spellcheck="true">##如果要给正数加上符号，可使用说明符+（将其放在对齐说明符后面）而不是默认的-。如果将符号说明符指定为空格，会在整数前面加上空格而不是+。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:-.2f}\n{1:-.2f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token operator">-</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3.14</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:+.2f}\n{1:+.2f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token operator">-</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3.14</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0: .2f}\n{1: .2f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token operator">-</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">3.14</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token comment" spellcheck="true">##最后一个要素是井号(#)选项，可以将其放在符号说明符和宽度之间（如果指定了这两种设置）。这个选项将初伏另一种转换方式，转换细节随类型而异。例如，对于二进制、八进制和十六进制转换，将加上一个前缀。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{:b}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token string">'101010'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{:#b}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token string">'0b101010'</span><span class="token comment" spellcheck="true">###对于各种十进制数，它要求必须包含小数点（对于类型g，它保留小数点后面的零）。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{:g}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token string">'42'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{:#g}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token string">'42.0000'</span></code></pre><h2 id="3-4-字符串方法"><a href="#3-4-字符串方法" class="headerlink" title="3.4 字符串方法"></a>3.4 字符串方法</h2><p>前面介绍了列表的方法，而字符串的方法要多得多，这里只介绍一些最有用的。</p><h3 id="3-4-1-center"><a href="#3-4-1-center" class="headerlink" title="3.4.1 center"></a>3.4.1 center</h3><p>方法center通过在两边添加填充字符（默认为空格）让字符串居中。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"The Middle by Jimmy Eat World"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token string">'     The Middle by Jimmy Eat World     '</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"The Middle by Jimmy Eat World"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token string">'*****The Middle by Jimmy Eat World*****'</span></code></pre><p>另请参见：ljust、rjust和zfill</p><h3 id="3-4-2-find"><a href="#3-4-2-find" class="headerlink" title="3.4.2 find"></a>3.4.2 find</h3><p>方法find在字符串中查找子串。如果找到，就返回子串第一个字符的索引，否则返回-1。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> title <span class="token operator">=</span> <span class="token string">"Monty Python's Flying Circus"</span><span class="token operator">>></span><span class="token operator">></span> title<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Monty'</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> title<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> title<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"Flying"</span><span class="token punctuation">)</span><span class="token number">15</span><span class="token operator">>></span><span class="token operator">></span> title<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Zirquss'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token comment" spellcheck="true">##注：字符串方法find返回的并非布尔值。如果find像这样返回0，就意味着它在索引0处找到了指定的子串。</span><span class="token comment" spellcheck="true">#还可以指定搜索的起点和终点（可选的）</span><span class="token operator">>></span><span class="token operator">></span> subject <span class="token operator">=</span> <span class="token string">'$$$ Get rich now!!! $$$'</span><span class="token operator">>></span><span class="token operator">></span> subject<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'$$$'</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> subject<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'$$$'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##只指定了起点</span><span class="token number">20</span><span class="token operator">>></span><span class="token operator">></span> subject<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'!!!'</span><span class="token punctuation">)</span><span class="token number">16</span><span class="token operator">>></span><span class="token operator">></span> subject<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'!!!'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##同时指定了起点和终点</span><span class="token operator">-</span><span class="token number">1</span><span class="token comment" spellcheck="true">##注：起点和终点值指定你的搜索范围包含起点，但不包含终点。这是Python惯常的做法。</span></code></pre><p>另请参见：rfind、index、rindex、count、startswith、endswith</p><h3 id="3-4-3-join"><a href="#3-4-3-join" class="headerlink" title="3.4.3 join"></a>3.4.3 join</h3><p>join是一种非常重要的字符串方法，其作用与split相反，用于合并序列的元素。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> sep <span class="token operator">=</span> <span class="token string">'+'</span><span class="token operator">>></span><span class="token operator">></span> sep<span class="token punctuation">.</span>join<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##尝试合并一个数字列表</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#2>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    sep<span class="token punctuation">.</span>join<span class="token punctuation">(</span>seq<span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> sequence item <span class="token number">0</span><span class="token punctuation">:</span> expected str instance<span class="token punctuation">,</span> int found<span class="token operator">>></span><span class="token operator">></span> seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> sep<span class="token punctuation">.</span>join<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##合并一个字符串列表</span><span class="token string">'1+2+3+4+5'</span><span class="token operator">>></span><span class="token operator">></span> dirs <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'usr'</span><span class="token punctuation">,</span> <span class="token string">'bin'</span><span class="token punctuation">,</span> <span class="token string">'env'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'/'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dirs<span class="token punctuation">)</span><span class="token string">'/usr/bin/env'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C:'</span> <span class="token operator">+</span> <span class="token string">'\\'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dirs<span class="token punctuation">)</span><span class="token punctuation">)</span>C<span class="token punctuation">:</span>\usr\bin\env<span class="token comment" spellcheck="true">##如我们所见，所合并的序列的元素必须都是字符串。注意到在最后两个示例中，我们使用了一系列目录，并按照UNIX和DOS/Windows的约定设置其格式：通过使用不同的分隔符（并在DOS版本中添加了盘符）。</span></code></pre><p>另请参见：split</p><h3 id="3-4-4-lower"><a href="#3-4-4-lower" class="headerlink" title="3.4.4 lower"></a>3.4.4 lower</h3><p>方法lower返回字符串的小写版本。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Trondheim Hammer Dance'</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'trondheim hammer dance'</span></code></pre><p>在编写代码时，如果不想区分字符串的大小写（即忽略大小写的差别），这将很有用。例如，假设你要检查列表中是否包含指定的用户名。</p><p>一个与lower相关的方法是title。它将字符串转换为词首大写，即所有单词的首字母都大写，其他字母都小写。然而，它确定单词边界的方式可能导致结果不合理。</p><p>另请参见：islower、istitle、isupper、translate</p><p>附录：capitalize、casefold、swapcase、title、upper</p><h3 id="3-4-5-replace"><a href="#3-4-5-replace" class="headerlink" title="3.4.5 replace"></a>3.4.5 replace</h3><p>方法replace将指定的子串替换为另一字符串，并返回替换后的结果。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'This is a test'</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'eez'</span><span class="token punctuation">)</span><span class="token string">'Theez eez a test'</span><span class="token comment" spellcheck="true">##如果使用过字处理程序的“查找并替换”功能，一定指导这个方法很有用。</span></code></pre><p>另请参见：translate、expandtabs</p><h3 id="3-4-6-split"><a href="#3-4-6-split" class="headerlink" title="3.4.6 split"></a>3.4.6 split</h3><p>split是一个非常重要的字符串方法，其作用与join相反，用于将字符串拆分为序列。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'1+2+3+4+5'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'/usr/bin/env'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'usr'</span><span class="token punctuation">,</span> <span class="token string">'bin'</span><span class="token punctuation">,</span> <span class="token string">'env'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Using the default'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'Using'</span><span class="token punctuation">,</span> <span class="token string">'the'</span><span class="token punctuation">,</span> <span class="token string">'default'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##注：如果没有指定分隔符，将默认在单个或多个连续的空白字符（空格、制表符、换行符等）处进行拆分。</span></code></pre><p>另请参见：join</p><p>附录：partition、rpartition、rsplit、splitlines</p><h3 id="3-4-7-strip"><a href="#3-4-7-strip" class="headerlink" title="3.4.7 strip"></a>3.4.7 strip</h3><p>方法strip将字符串开头和末尾的空白（但不包括中间的空白）删除，并返回删除后的结果。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'   internal whitespace is kept   '</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'internal whitespace is kept'</span><span class="token comment" spellcheck="true">##还可以在一个字符串参数中指定要删除哪些字符：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'*** SPAM * for * everyone!!! ***'</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">' *!'</span><span class="token punctuation">)</span><span class="token string">'SPAM * for * everyone'</span><span class="token comment" spellcheck="true">##这个方法只删除开头或末尾的指定字符，因此中间的星号未被删除。</span></code></pre><p>另请参见：lstrip、rstrip</p><h3 id="3-4-8-translate"><a href="#3-4-8-translate" class="headerlink" title="3.4.8 translate"></a>3.4.8 translate</h3><p>方法translate与replace一样替换字符串的特定部分，但不同的是它只能进行单字符串替换。这个方法的优势在于能够同时替换多个字符，因此效率比replace高。</p><p>这个方法用途很多（如替换换行符或其他随平台而异的特殊字符），但这里只介绍一个比较简单的示例。假设要将一段英语文本转换为带有德国口音的版本，为此必须将字符c和s分别替换为k和z。</p><p>然而，使用translate前必须创建一个转换表。这个转换表指出了不同Unicode码点之间的转换关系。要创建转换表，可对于字符串类型str调用方法maketrans，这个方法接受两个参数：两个字符相同的字符串，它们指定要将第一字符中的每个字符都替换为第二个字符串中的相应字符。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> table <span class="token operator">=</span> str<span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span><span class="token string">'cs'</span><span class="token punctuation">,</span> <span class="token string">'kz'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> table<span class="token comment" spellcheck="true">##如果愿意，可以查看转换表中的内容，但我们看到的只是Unicode码点之间的映射。</span><span class="token punctuation">{</span><span class="token number">99</span><span class="token punctuation">:</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">:</span> <span class="token number">122</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'this is an incredible test'</span><span class="token punctuation">.</span>translate<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##创建转换表后，就可以将其用做方法translate的参数。</span><span class="token string">'thiz iz an inkredible tezt'</span><span class="token operator">>></span><span class="token operator">></span> table <span class="token operator">=</span> str<span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span><span class="token string">'cs'</span><span class="token punctuation">,</span> <span class="token string">'kz'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##调用方法maketrans时，还可以提供可选的第三个参数，指定要将哪些字母删除。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'this is an incredible test'</span><span class="token punctuation">.</span>translate<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token string">'thizizaninkredibletezt'</span></code></pre><p>另请参见：replace、lower</p><h3 id="3-4-9-判断字符串是否满足特定的条件"><a href="#3-4-9-判断字符串是否满足特定的条件" class="headerlink" title="3.4.9 判断字符串是否满足特定的条件"></a>3.4.9 判断字符串是否满足特定的条件</h3><p>很多字符串方法都以is打头，如isspace、isdigit和isupper，它们判断字符串是否具有特定的性质（如包含的字符全为空白、数字或大写）。如果字符串具备特定的性质，这些方法就返回Ture，否则就返回False。</p><p>另请参见：isalnum、isalpha、isdecimal、isdigit、isidentifier、islower、isnumeric、isprintable、isspace、istitle、isupper</p><h2 id="3-5-小结"><a href="#3-5-小结" class="headerlink" title="3.5 小结"></a>3.5 小结</h2><p>本章介绍了字符串的两个重要方面：</p><ul><li>字符串格式设置：求模运算符（%）可用于将值合并为包含转换标志（如%s）的字符串，这让你能够以众多方式设置值的格式，如左对齐或右对齐，指定字段宽度和精度，添加符号（正好或符号）以及在左边填充0等。</li><li>字符串方法：字符串有很多方法，有些很有用（如split和join），有些很少用到（如istitle和capitalize）。<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a><a href="https://github.com/ChenaniahLv/Python-Learning/tree/master/3Ch" target="_blank" rel="noopener">练习</a></h2></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 教程 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习第2章-列表和元组</title>
      <link href="/2019/02/13/python-xue-xi-di-2-zhang-lie-biao-he-yuan-zu/"/>
      <url>/2019/02/13/python-xue-xi-di-2-zhang-lie-biao-he-yuan-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-列表和元组"><a href="#第二章-列表和元组" class="headerlink" title="第二章-列表和元组"></a>第二章-列表和元组</h1><ul><li>数据结构是以某种方式（如通过编号）组合起来的数据元素（如数、字符乃至其他数据结构）的集合。</li><li>Python中，最基本的数据结构为序列（sequence）。</li><li>序列中每个元素都有编号，即其位置或索引，其中第一个元素的索引为0，第二个元素的索引为1，依此类推。这显得更加自然，同时可以回绕到序列末尾，用负索引表示序列末尾元素的位置。</li><li>元素是一种特殊的序列，类似与列表，但是不能修改。<h2 id="2-1-序列概述"><a href="#2-1-序列概述" class="headerlink" title="2.1 序列概述"></a>2.1 序列概述</h2></li><li>Python内置了多种序列，最常用的两种有列表和元组，另一种重要的序列是字符串（下章）。</li><li>列表和元组的主要不同在于，列表是可以修改的，而元组不可以。这意味着适用于需要中途添加元素的情形，而元组适用于出于某种考虑需要禁止修改序列的情形。</li><li>几乎在所有情况下都可以使用列表来代替元组，但一个例外情况是将元组用作字典键，因为字典键是不允许修改的。</li><li>在处理一系列值时（数据库），序列很有用。例如：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> edward <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Edward Gumby'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##如果用列表来表示，所有元素都放在方括号内，并用逗号隔开。</span><span class="token operator">>></span><span class="token operator">></span> john <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'John Smith'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> database <span class="token operator">=</span> <span class="token punctuation">[</span>edward<span class="token punctuation">,</span> john<span class="token punctuation">]</span><span class="token comment" spellcheck="true">##序列中还可包含其他序列。</span><span class="token operator">>></span><span class="token operator">></span> database<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Edward Gumby'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'John Smith'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre></li><li>Python支持一种数据结构的基本概念，名为容器（container）。</li><li>容器基本上就是可以包含其他对象的对象。两种主要的容器是序列（如列表和元组）和映射（如字典）。</li><li>在序列中，每个元素都有编号，而在映射中，每个元素都有名称（也叫键）。（映射-第四章）</li><li>有一种既不是序列也不是映射的容器，叫做集合。（第10章）<h2 id="2-2-通用的序列操作"><a href="#2-2-通用的序列操作" class="headerlink" title="2.2 通用的序列操作"></a>2.2 通用的序列操作</h2></li><li>有几种操作适用于所有的序列，包括索引、切片、相加、相乘和成员资格检查。另外，Python中还提供了一些内置函数，可用于确定序列的长度以及找出序列中最大和最小的元素。</li><li>另外还有一个重要操作叫做迭代（iteration），对序列进行迭代意味着对其每个元素都执行特定的操作。（第五章）<h3 id="2-2-1-索引"><a href="#2-2-1-索引" class="headerlink" title="2.2.1 索引"></a>2.2.1 索引</h3>序列中所有元素都有编号——从0开始递增，可以使用编号来访问各个元素，这称作索引（indexing）。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> greeting <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token operator">>></span><span class="token operator">></span> greeting<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##可以使用索引来获取元素。这种索引方式适用于所有序列。</span><span class="token string">'H'</span><span class="token operator">>></span><span class="token operator">></span> greeting<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##当使用负数进行索引时，Python将从最后一个元素开始往左数，因此-1是最后一个元素的位置。</span><span class="token string">'o'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Hello'</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##对于字符串或其他序列字面量，可直接对其进行索引操作，无需将其赋给变量。</span><span class="token string">'e'</span><span class="token operator">>></span><span class="token operator">></span> fourth <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'Year: '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##如果函数调用返回一个序列，可直接对其进行索引操作。</span>Year<span class="token punctuation">:</span> <span class="token number">2005</span><span class="token operator">>></span><span class="token operator">></span> fourth<span class="token string">'5'</span></code></pre><h3 id="2-2-2-切片"><a href="#2-2-2-切片" class="headerlink" title="2.2.2 切片"></a>2.2.2 切片</h3>除了使用索引来访问单个元素外，还可以使用切片来访问特定范围内的元素。为此，可以使用两个索引，并且用冒号分隔：<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##第一个索引是包含的第一个元素的编号，但第二个索引是切片后余下的第一个元素的编号。简而言之，我们用两个索引来指定切片的边界，其中第一个索引指定的元素包含在切片内，但第二个索引指定的元素不包含在切片内。</span><span class="token operator">>></span><span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><h4 id="1-绝妙的简写"><a href="#1-绝妙的简写" class="headerlink" title="1.绝妙的简写"></a>1.绝妙的简写</h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##索引10指的是第11个元素：它并不存在，但确实是到达最后一个元素后再前进一步所处的位置。</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##如果要从列表末尾开始数，可使用负数索引。</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##在执行切片操作时，如果第一个索引指定的元素位于第二个索引指定的元素后面，结果就为空序列。</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##如果切片结束于序列末尾，可省略第二个索引。</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##如果切片始于序列开头，可省略第一个索引。</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##如果要复制整个序列，可将两个索引都省略。</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span></code></pre><h4 id="2-更大的步长"><a href="#2-更大的步长" class="headerlink" title="2.更大的步长"></a>2.更大的步长</h4>执行切片操作时，我们显式或隐式地指定起点和终点，但通常省略另一个参数，即步长。在普通切片中，步长为1。这意味着从一个元素移到下一个元素，因此切片包含起点和终点之间的所有元素。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##步长为1</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##步长为2</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##步长为3</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##在使用步长操作时，仍可以使用简写</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##步长为负数时，从右向左提取元素</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##步长为负数，同样可以使用简写</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##步长为负数时，要求第一个索引大于第二个索引，否则会返回空序列</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##步长为正数时，它从起点移到终点，而步长为负数时，它从终点移到起点。</span></code></pre><h3 id="2-2-3-序列相加"><a href="#2-2-3-序列相加" class="headerlink" title="2.2.3 序列相加"></a>2.2.3 序列相加</h3>可以使用加法运算符来拼接序列，但是不能拼接列表和字符串，虽然它们都是序列。一般来说，不能拼接不同类型的序列。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> <span class="token string">'world!'</span><span class="token string">'Hello, world!'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'world!'</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>File <span class="token string">"&lt;pyshell#14>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'world!'</span>TypeError<span class="token punctuation">:</span> can only concatenate list <span class="token punctuation">(</span><span class="token operator">not</span> <span class="token string">"str"</span><span class="token punctuation">)</span> to list</code></pre><h3 id="2-2-4-乘法"><a href="#2-2-4-乘法" class="headerlink" title="2.2.4 乘法"></a>2.2.4 乘法</h3>将序列与数x相乘时，将重复这个序列x次来创建一个新序列：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'python'</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token string">'pythonpythonpythonpythonpython'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span></code></pre><strong>None、空列表和初始化</strong></li><li>空列表是使用不包含任何内容的两个方括号（[]）表示的。</li><li>如果要创建一个包含10个元素的列表，但列表中没有有用的内容，可以使用[0]*10。</li><li>有些情况下，可能想要使用表示“什么都没有”的值，如表示还没有在列表中添加任何内容，可使用None。</li><li>在Python中，None表示什么都没有，因此，要将列表的长度初始化为10，可以如下操作：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sequence <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token operator">>></span><span class="token operator">></span> sequence<span class="token punctuation">[</span>None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">]</span></code></pre><h3 id="2-2-5-成员资格"><a href="#2-2-5-成员资格" class="headerlink" title="2.2.5 成员资格"></a>2.2.5 成员资格</h3>要检查特定的值是否包含在序列中，可使用运算符in。这个运算符与前面讨论的运算符（如乘法或加法运算符）稍有不同。它检查是否满足指定的条件，并返回相应的值：满足时返回True，不满足时返回False。这样的运算符称为<strong>布尔运算符</strong>，而前述真值称为<strong>布尔值</strong>（第五章）。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> per <span class="token operator">=</span> <span class="token string">'rw'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'w'</span> <span class="token keyword">in</span> per<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'x'</span> <span class="token keyword">in</span> per<span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mlh'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> input<span class="token punctuation">(</span><span class="token string">'Enter your user name: '</span><span class="token punctuation">)</span> <span class="token keyword">in</span> users<span class="token comment" spellcheck="true">##可用于安全策略中的验证</span>Enter your user name<span class="token punctuation">:</span> mlh<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> subject <span class="token operator">=</span> <span class="token string">'$$$ Get rich now!!! $$$'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'rich'</span> <span class="token keyword">in</span> subject<span class="token comment" spellcheck="true">##可验证字符串是否为另一字符串的子串</span><span class="token boolean">True</span></code></pre><strong>长度、最小值和最大值</strong></li></ul><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">len</td><td style="text-align:center">返回序列包含的元素个数</td></tr><tr><td style="text-align:center">max</td><td style="text-align:center">返回序列中最大的元素</td></tr><tr><td style="text-align:center">min</td><td style="text-align:center">返回序列中最小的元素</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">678</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token number">678</span><span class="token operator">>></span><span class="token operator">></span> min<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token number">34</span><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> min<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token comment" spellcheck="true">##最后两个表达式中，调用max和min时指定的实参并不是序列，而直接将数作为实参。</span></code></pre><h2 id="2-3-列表"><a href="#2-3-列表" class="headerlink" title="2.3 列表"></a>2.3 列表</h2><p>本节主要讨论列表不同于元组和字符串的地方——列表是可变的，即可修改其内容。</p><h3 id="2-3-1-函数-list"><a href="#2-3-1-函数-list" class="headerlink" title="2.3.1 函数 list"></a>2.3.1 函数 list</h3><p>鉴于不能像修改列表那样修改字符串，因此在有些情况下使用字符串来创建列表很有帮助。</p><ul><li>为此，可以使用函数 list。注意，可以将任何序列（而不仅仅时字符串）作为list的参数。</li><li>要将字符列表转换为字符串，可以使用 ‘’.join(somelist)。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> list<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">[</span><span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##''之间可以加入分隔符，如'/'.join(somelist)</span><span class="token string">'Hello'</span></code></pre><h3 id="2-3-2-基本的列表操作"><a href="#2-3-2-基本的列表操作" class="headerlink" title="2.3.2 基本的列表操作"></a>2.3.2 基本的列表操作</h3>可对列表执行所有的标准序列操作，如索引、切片、拼接和相乘，但列表的特点在于它是可以修改的。本节为一些修改列表的方式：给元素赋值、删除元素、给切片赋值以及使用列表的方法。（注：并非所有的列表方法都会修改列表。）<h4 id="1-修改列表：给元素赋值"><a href="#1-修改列表：给元素赋值" class="headerlink" title="1.修改列表：给元素赋值"></a>1.修改列表：给元素赋值</h4>修改列表使用普通赋值语句即可，但是使用的是索引表示法来给特定位置的元素赋值，如：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##注意不能给不存在的元素赋值，因此如果列表长度为2，就不能给索引为100的元素赋值。</span></code></pre><h4 id="2-删除元素"><a href="#2-删除元素" class="headerlink" title="2.删除元素"></a>2.删除元素</h4>从列表中删除元素，使用del语句。del语句除用于删除列表元素，还可以用于字典乃至变量。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Beth'</span><span class="token punctuation">,</span> <span class="token string">'Cecil'</span><span class="token punctuation">,</span> <span class="token string">'Dee-Dee'</span><span class="token punctuation">,</span> <span class="token string">'Earl'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> names<span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Beth'</span><span class="token punctuation">,</span> <span class="token string">'Dee-Dee'</span><span class="token punctuation">,</span> <span class="token string">'Earl'</span><span class="token punctuation">]</span></code></pre><h4 id="3-给切片赋值"><a href="#3-给切片赋值" class="headerlink" title="3.给切片赋值"></a>3.给切片赋值</h4></li><li>使用切片赋值，可以同时给多个元素赋值。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token string">'Perl'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> name<span class="token punctuation">[</span><span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token string">'ar'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> name<span class="token punctuation">[</span><span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">]</span></code></pre></li><li>使用切片赋值，可以将切片替换为长度与其不同的序列。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token string">'Perl'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token string">'ython'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> name<span class="token punctuation">[</span><span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">]</span></code></pre></li><li>使用切片赋值还可以在不替换原有元素的情况下插入新元素。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></code></pre></li><li>使用切片赋值还可以删除特定切片。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##本操作与del numbers[1:4]等效</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></code></pre><h3 id="2-3-3-列表方法"><a href="#2-3-3-列表方法" class="headerlink" title="2.3.3 列表方法"></a>2.3.3 列表方法</h3>方法（第七章）是与对象（列表、数、字符串等）联系紧密的函数。通常使用object.method(arguments)来调用，方法调用与函数调用很想，只是在方法名前加上了对象和句点。<h4 id="1-append"><a href="#1-append" class="headerlink" title="1.append"></a>1.append</h4>方法append用于将一个对象附加到列表末尾。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##不给列表取名list的原因是list是Python的一个内置函数，如果给列表命名list，那么将无法使用list函数。</span><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></code></pre>注：append不会返回修改后的新列表，而是直接修改旧列表。<h4 id="2-clear"><a href="#2-clear" class="headerlink" title="2.clear"></a>2.clear</h4>方法clear就地清空列表的内容。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##类似于切片赋值语句 lst[:] = []</span><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><h4 id="3-copy"><a href="#3-copy" class="headerlink" title="3.copy"></a>3.copy</h4>方法copy复制列表。</li><li>常规复制只是将另一个名称关联到列表：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> a<span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></code></pre></li><li>要将a和b指向不同的列表，就必须将b关联到a的副本：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> a<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##这类似于a[:]或list(a)，它们也都复制a。</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></code></pre><h4 id="4-count"><a href="#4-count" class="headerlink" title="4.count"></a>4.count</h4>方法count计算指定的元素在列表中出现了多少次。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'to'</span><span class="token punctuation">,</span> <span class="token string">'be'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'to'</span><span class="token punctuation">,</span> <span class="token string">'be'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'to'</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">1</span></code></pre><h4 id="5-extend"><a href="#5-extend" class="headerlink" title="5.extend"></a>5.extend</h4>方法extend让你能够同时将多个值附加到列表末尾，为此可将这些值组成的序列作为参数提供给方法extend。换而言之，可以使用一个列表来扩展另一个列表。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span></code></pre>这种情况看起来类似于拼接，但存在一个重要差别，那就是将修改被拓展的序列，在常规拼接（a+b）中，情况是返回一个全新的序列。而如果要修改原序列，则可以使用a=a+b，但拼接的效率比extend低；也可以使用a[len(a):]=b来切片赋值，但可读性不高。<h4 id="6-index"><a href="#6-index" class="headerlink" title="6.index"></a>6.index</h4>方法index在列表中查找指定值第一次出现的索引。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> knights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'We'</span><span class="token punctuation">,</span> <span class="token string">'are'</span><span class="token punctuation">,</span> <span class="token string">'the'</span><span class="token punctuation">,</span> <span class="token string">'knights'</span><span class="token punctuation">,</span> <span class="token string">'who'</span><span class="token punctuation">,</span> <span class="token string">'say'</span><span class="token punctuation">,</span> <span class="token string">'ni'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> knights<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'who'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##找到指定值第一次出现的索引</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> knights<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'herring'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##未找到，所以报错</span>Traceback <span class="token punctuation">(</span>innermost last<span class="token punctuation">)</span><span class="token punctuation">:</span>File <span class="token string">"&lt;pyshell>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> ?knights<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'herring'</span><span class="token punctuation">)</span>ValueError<span class="token punctuation">:</span> list<span class="token punctuation">.</span>index<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> x <span class="token operator">not</span> <span class="token keyword">in</span> list</code></pre><h4 id="7-insert"><a href="#7-insert" class="headerlink" title="7.insert"></a>7.insert</h4>方法insert用于将一个对象插入列表。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span></code></pre>与extend一样，也可以用切片操作来获得与insert一样的效果，但是可读性无法与insert媲美。<h4 id="8-pop"><a href="#8-pop" class="headerlink" title="8.pop"></a>8.pop</h4>方法pop从列表中删除一个元素（末尾为最后一个元素），并返回这一元素。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##注：pop是唯一一个既修改列表又返回一个非None值的方法。</span></code></pre>可以使用pop实现一种常见的数据结构——栈（stack）。栈就像一叠盘子，最后加入的盘子最先取走，被称为先进后出（LIFO）。</li></ul><p>push和pop是大家普遍接受的两种栈操作（加入和取走）的名称。Python没有提供push，但可以使用append来替代。方法pop和append的效果相反，因此将刚弹出的值压入（或附加）后，得到的栈将与原来相同。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></code></pre><h4 id="9-remove"><a href="#9-remove" class="headerlink" title="9.remove"></a>9.remove</h4><p>方法remove用于删除第一个为指定值的元素。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'to'</span><span class="token punctuation">,</span> <span class="token string">'be'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'to'</span><span class="token punctuation">,</span> <span class="token string">'be'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'be'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'to'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'to'</span><span class="token punctuation">,</span> <span class="token string">'be'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'bee'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##无法删除列表中不存在的元素。</span>Traceback <span class="token punctuation">(</span>innermost last<span class="token punctuation">)</span><span class="token punctuation">:</span>File <span class="token string">"&lt;pyshell>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> ?x<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'bee'</span><span class="token punctuation">)</span>ValueError<span class="token punctuation">:</span> list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> x <span class="token operator">not</span> <span class="token keyword">in</span> list<span class="token comment" spellcheck="true">##注：remove是就地修改且不返回值的方法之一。不同于pop的是，它修改列表，但不返回任何值。</span></code></pre><h4 id="10-reverse"><a href="#10-reverse" class="headerlink" title="10.reverse"></a>10.reverse</h4><p>方法reverse按相反的顺序排列列表中的元素。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##不返回值</span></code></pre><p>如果按照相反的顺序迭代序列，可使用函数reversed。这个函数不返回列表，而是返回一个迭代器（第九章）。可以使用list将返回的对象转换为列表。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> reversed<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&lt;</span>list_reverseiterator object at <span class="token number">0x000002DFAA1C5588</span><span class="token operator">></span><span class="token comment" spellcheck="true">##迭代器（(＠_＠;)? [不懂]）</span><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h4 id="11-sort"><a href="#11-sort" class="headerlink" title="11.sort"></a>11.sort</h4><p>方法sort用于对列表就地排序。就地排序意味着对原来的列表进行修改，使其元素按照顺序排列，而不是返回排序后的列表的副本。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span></code></pre><p>在需要排序后的列表副本并保留原始列表不变时，不能直接将x赋给y，因为这样x和y将指向同一个列表。以下为两种方法：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##先将y关联到x的副本，再对y进行排序：</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##使用函数sorted</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> sorted<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#注：实际上，这个函数可用于任何序列，但总是返回一个列表。</span><span class="token operator">>></span><span class="token operator">></span> sorted<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span></code></pre><p>如果要将元素按相反的顺序排列，可先使用sort（或sorted），再调用方法reverse，也可以使用参数reverse（下节）。</p><h4 id="12-高级排序"><a href="#12-高级排序" class="headerlink" title="12.高级排序"></a>12.高级排序</h4><p>方法sort接受两个可选参数：key和reverse。这两个参数通常是按照名称指定的，称为关键字参数（第六章）。参数key类似于参数cmp：你将其设置为一个用于排列的函数。然而，不会直接使用这个函数来判断一个元素是否比另一个元素小，而是使用它来为每个元素创建一个键，再根据这些键对元素进行排列。</p><ul><li>因此，要根据长度对元素进行排列，可将参数key设置为函数len。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'abalone'</span><span class="token punctuation">,</span> <span class="token string">'acme'</span><span class="token punctuation">,</span> <span class="token string">'add'</span><span class="token punctuation">,</span> <span class="token string">'aerate'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>len<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'add'</span><span class="token punctuation">,</span> <span class="token string">'acme'</span><span class="token punctuation">,</span> <span class="token string">'aerate'</span><span class="token punctuation">,</span> <span class="token string">'abalone'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">]</span></code></pre></li><li>对于另一个关键字参数reverse，只需要将其指定为一个真值（第五章），以指出是否要按相反的顺序对列表进行排列。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre>函数sorted也接受参数key和reverse。在很多情况下，将参数key设置为一个自定义函数（第六章）很有用。<h2 id="2-4-元组：不可修改的序列"><a href="#2-4-元组：不可修改的序列" class="headerlink" title="2.4 元组：不可修改的序列"></a>2.4 元组：不可修改的序列</h2>与列表一样，元组也是序列，唯一的差别在于元组是不能修改的（字符串也不能修改）。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token comment" spellcheck="true">##将一些值用逗号分隔，即可创建一个元素</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##通常做法：将元组用圆括号括起</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##空元组</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">42</span><span class="token comment" spellcheck="true">##即使一个值的元组也必须加上逗号</span><span class="token number">42</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">42</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##有括号也要加逗号才可以创建元组，在元组的创建中逗号至关重要。</span><span class="token number">42</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">126</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span></code></pre>函数tuple的工作原理与list很像：它将一个序列作为参数，并将其转换为元组。如果参数已经是元组，就原封不动地返回它。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> tuple<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> tuple<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> tuple<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></code></pre>元组并不太复杂，而且除了创建和访问其元素外，可对元组执行的操作不多。元组的创建及其元素的访问方式与其他序列相同。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre>元组的切片也是元组，就像列表的切片也是列表一样。为何要熟悉元组，原因如下：</li><li>它们用作映射（第四章）中的键（以及集合的成员），而列表不行。</li><li>有些内置函数和方法返回元组。<h2 id="2-5-小结"><a href="#2-5-小结" class="headerlink" title="2.5 小结"></a>2.5 小结</h2></li><li>序列：序列是一种数据结构，其中的元素带编号（编号从0开始）。列表、字符串和元组都属于序列，其中列表是可变的，而元组和字符串是不可变的。要访问序列的一部分，可以使用切片操作：提供两个指定切片起始和结束位置的索引。要修改列表，可给其元素赋值，也可以使用赋值语句给切片赋值。</li><li>成员资格：要确定特定的值是否包含在序列（或其他容器）中，可使用运算符in。将运算符in用于字符串时情况比较特殊——这样可查找子串。</li><li>方法：一些内置类型（如列表和字符串，但不包括元组）提供了很多有用的方法。方法有点像函数，只是与特定的值相关联。方法是面向对象编程的一个重要方面（第七章）。<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a><a href="https://github.com/ChenaniahLv/Python-Learning/tree/master/2Ch" target="_blank" rel="noopener">练习</a></h2></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 教程 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习第1章-快速上手：基础知识</title>
      <link href="/2019/02/13/python-xue-xi-di-1-zhang-kuai-su-shang-shou-ji-chu-zhi-shi/"/>
      <url>/2019/02/13/python-xue-xi-di-1-zhang-kuai-su-shang-shou-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-快速上手：基础知识"><a href="#第一章-快速上手：基础知识" class="headerlink" title="第一章-快速上手：基础知识"></a>第一章-快速上手：基础知识</h1><h2 id="1-1-交互式解释器"><a href="#1-1-交互式解释器" class="headerlink" title="1.1 交互式解释器"></a>1.1 交互式解释器</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world！"</span><span class="token punctuation">)</span></code></pre><p>可以输出hello world！</p><h2 id="1-2-算法是什么"><a href="#1-2-算法是什么" class="headerlink" title="1.2 算法是什么"></a>1.2 算法是什么</h2><p>算法由一些列必须按照一定顺序执行的操作说明组成，要素为<strong>对象</strong>和<strong>语句</strong>。</p><h2 id="1-3-数和表达式"><a href="#1-3-数和表达式" class="headerlink" title="1.3 数和表达式"></a>1.3 数和表达式</h2><ul><li>一般加减乘除操作即为简单的”+-*/“操作。</li><li>除法运算的结果为小数，即为浮点数。</li><li>如果想在除法运算中丢弃小数部分，即执行整数运算，可以使用双斜杠”//“。</li><li>求余数可以用求余（求模）运算符”%”</li><li>应该注意整数的除法运算为向下圆整的结果，例如：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span> <span class="token operator">//</span> <span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">//</span> <span class="token operator">-</span><span class="token number">3</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span></code></pre></li><li>乘方运算符为”**”，注：乘方运算符的优先级比求负（单目减）高，因此负数的乘方运算要加括号。</li><li>十六进制（0x）、八进制（0）和二进制（0b）表示都以0打头，例如：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0xAF</span><span class="token number">175</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">010</span><span class="token number">8</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0b1011010010</span><span class="token number">722</span></code></pre><h2 id="1-4-变量"><a href="#1-4-变量" class="headerlink" title="1.4 变量"></a>1.4 变量</h2>变量是表示（或指示）特定值的名称，给变量赋予特定值的操作称为赋值，例如：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token number">6</span></code></pre>注：在Python中，名称（标识符）只能由字母、数字和下划线（_）构成，且不能以数字打头。因此在Python中Plan9是合法的变量名，而9Plan不是。<h2 id="1-5-语句"><a href="#1-5-语句" class="headerlink" title="1.5 语句"></a>1.5 语句</h2>表达式<strong>是</strong>一些东西，而语句<strong>做</strong>一些事情。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token comment" spellcheck="true">##表达式</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##语句，print实际上为一个函数，因此所说的print语句其实是函数调用。</span><span class="token number">4</span></code></pre>所有语句的根本特征：执行修改操作。例如，赋值语句改变变量，而print语句改变屏幕显示的外观。<h2 id="1-6-获取用户输入"><a href="#1-6-获取用户输入" class="headerlink" title="1.6 获取用户输入"></a>1.6 获取用户输入</h2>提供变量的值使用input函数，例如：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"x: "</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##括号中打印特定字符串以提示用户输入的信息。</span>x<span class="token punctuation">:</span> <span class="token number">34</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"y: "</span><span class="token punctuation">)</span>y<span class="token punctuation">:</span> <span class="token number">42</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> int<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1428</span></code></pre><h2 id="1-7-函数"><a href="#1-7-函数" class="headerlink" title="1.7 函数"></a>1.7 函数</h2>函数犹如小型程序，可以用来执行特定的操作，例如乘方操作除了使用表达式”**”外，亦可以使用函数pow来实现：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">8</span></code></pre>像这样使用函数称为调用函数：你向他提供实参，而它返回一个值。鉴于函数调用返回一个值，因此它们也是表达式。</li></ul><p>另常用函数如abs计算绝对值，round将浮点数圆整为与之最接近的整数：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">10</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> round<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">1</span></code></pre><h2 id="1-8-模块"><a href="#1-8-模块" class="headerlink" title="1.8 模块"></a>1.8 模块</h2><p>可将模块视为扩展，通过将其导入可以扩展Python功能。要导入特殊模块，可以使用特殊命令import。我们使用import导入模块，再以module.function的方式使用模块中的函数。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> math<span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">32.9</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##floor返回小于或等于给定数的最小整数，相当于int(32.9)</span><span class="token number">32</span><span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token number">32.3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##ceil返回大于或等于给定数的最小整数</span><span class="token number">33</span></code></pre><p>如果确定不会从不同模块导入多个同名函数，并且不想在每次调用函数时都制定模块名，在这种情况下，可以使用命令import的如下变种：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt<span class="token comment" spellcheck="true">##通过使用命令import的变种from module import funtion，可在调用函数时不制定模块前缀。</span><span class="token operator">>></span><span class="token operator">></span> sqrt<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token number">3.0</span></code></pre><p>另外，可以使用变量来引用函数（以及其他大部分Python元素）。执行赋值语句foo = math.sqrt后，就可使用foo来计算平方根。例如，foo(4)的结果为2.0。</p><h3 id="cmath和复数"><a href="#cmath和复数" class="headerlink" title="cmath和复数"></a><strong>cmath和复数</strong></h3><p>如果坚持将值域限定为实数，并使用其近似的浮点数实现，就无法计算复数的平方根。复数的平方根为序数，而由实部和虚部组成的数为复数。Python标准库中提供了一个专门用于处理复数的模块。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">import</span> cmath<span class="token operator">>></span><span class="token operator">></span>cmath<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##注意到这里没有使用from...import...。如果使用了这种import命令，将无法使用常规函数。类似这样的名称冲突很隐蔽，因此除非必须使用from版的import命令，否则应坚持使用常规版import命令。</span><span class="token number">1j</span></code></pre><p>Python本身提供了对复数的支持（即使不使用import cmath也可以计算复数），但是Python没有专门表示虚数的类型，而将虚数视为实部为零的复数。</p><h2 id="1-9-保存并执行程序"><a href="#1-9-保存并执行程序" class="headerlink" title="1.9 保存并执行程序"></a>1.9 保存并执行程序</h2><p>新建一个拓展名为.py的文件，编写代码后保存运行。</p><h3 id="1-9-1-从命令提示符运行Python脚本"><a href="#1-9-1-从命令提示符运行Python脚本" class="headerlink" title="1.9.1 从命令提示符运行Python脚本"></a>1.9.1 从命令提示符运行Python脚本</h3><p>可以在终端中键入python filename.py来运行Python代码。</p><h3 id="1-9-2-让脚本像普通程序一样"><a href="#1-9-2-让脚本像普通程序一样" class="headerlink" title="1.9.2 让脚本像普通程序一样"></a>1.9.2 让脚本像普通程序一样</h3><p>在Windows中，为了看清Python代码文件的运行结果，可以在代码末尾添加如下代码行：</p><pre class=" language-python"><code class="language-python">input<span class="token punctuation">(</span><span class="token string">"press &lt;enter>"</span><span class="token punctuation">)</span></code></pre><p>即可在看清代码运行结果后按回车键关闭窗口。</p><h3 id="1-9-3-注释"><a href="#1-9-3-注释" class="headerlink" title="1.9.3 注释"></a>1.9.3 注释</h3><p>即在代码中以#开头解释代码行，#后到行尾的所有内容都将被忽略。</p><h2 id="1-10-字符串"><a href="#1-10-字符串" class="headerlink" title="1.10 字符串"></a>1.10 字符串</h2><p>字符串用途众多，但主要用途是表示一段文本。</p><h3 id="1-10-1-单引号字符串以及对引号转义"><a href="#1-10-1-单引号字符串以及对引号转义" class="headerlink" title="1.10.1 单引号字符串以及对引号转义"></a>1.10.1 单引号字符串以及对引号转义</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Hello world!"</span><span class="token string">'Hello world!'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Hello world!'</span><span class="token string">'Hello world!'</span></code></pre><p>在打印字符串时，单双引号并没有差别。但是，当引号是字符串的一部分时，对单双引号的使用便有了特定要求，或者可以对字符串中的引号进行转义。例如：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Let's go!"</span><span class="token comment" spellcheck="true">##字符串中有单引号，故两端只能使用双引号。</span><span class="token string">"Let's go!"</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'"Hello,world!" she said'</span><span class="token comment" spellcheck="true">##字符串中有双引号，故两端只能使用单引号。</span><span class="token string">'"Hello,world!" she said'</span><span class="token comment" spellcheck="true">##或者可以对字符串中的引号进行转义。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Let\'s go!'</span><span class="token string">"Let's go!"</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"\"Hello,world!\" she said"</span><span class="token string">'"Hello,world!" she said'</span><span class="token comment" spellcheck="true">##如果不喜欢用反斜杠，可以通过使用长字符串和原始字符串来避免使用\</span></code></pre><h3 id="1-10-2-拼接字符串"><a href="#1-10-2-拼接字符串" class="headerlink" title="1.10.2 拼接字符串"></a>1.10.2 拼接字符串</h3><ul><li>可以<em>同时依次</em>输入两个字符串来使两字符串拼接。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Let's say "</span> <span class="token string">'"Hello, world!"'</span><span class="token string">'Let\'s say "Hello, world!"'</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token string">"Hello, "</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> <span class="token string">"world!"</span><span class="token operator">>></span><span class="token operator">></span> x ySyntaxError<span class="token punctuation">:</span> invalid syntax</code></pre></li><li>可以（通过变量）替代字符串，通过相加来使两字符串拼接。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> <span class="token string">"world!"</span><span class="token string">'Hello world!'</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token string">"Hello, "</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> <span class="token string">"world!"</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">+</span> y'Hello<span class="token punctuation">,</span> world!"</code></pre><h3 id="1-10-3-字符串表示-str-和-repr"><a href="#1-10-3-字符串表示-str-和-repr" class="headerlink" title="1.10.3 字符串表示 str 和 repr"></a>1.10.3 字符串表示 str 和 repr</h3>Python在打印的所有字符串都有引号括起，但是在使用 print 函数时，字符串将没有引号括起，如果再加上表示换行符的编码\n，差别将更加明显。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Hello,\nworld!"</span><span class="token string">'Hello,\nworld!'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello,\nworld!"</span><span class="token punctuation">)</span>Hello<span class="token punctuation">,</span>world!</code></pre>通过两种不同的机制将值转换成了字符串。你可以通过使用函数str和repr直接使用这两种机制。使用str能以合理的方式将值转换成用户能够看懂的字符串。例如，尽可能将特殊字符编码转换为相应的字符。然而，使用repr时，通常会获得值的合法Python表达式表示。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span><span class="token string">"Hello,\nworld!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'Hello,\nworld!'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token string">"Hello,\nworld!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Hello<span class="token punctuation">,</span>world!</code></pre><h3 id="1-10-4-长字符串、原始字符串和字节"><a href="#1-10-4-长字符串、原始字符串和字节" class="headerlink" title="1.10.4 长字符串、原始字符串和字节"></a>1.10.4 长字符串、原始字符串和字节</h3><h4 id="1-长字符串"><a href="#1-长字符串" class="headerlink" title="1.长字符串"></a>1.长字符串</h4>要表示很长的字符串（跨越多行的字符串），可使用三引号（而不是普通引号）或三个双引号。这让解释器能够识别表示字符串开始和结束位置的引号，因此字符串本身可包含单引号和双引号，无需使用反斜杠进行转义。</li></ul><p><em>常规字符串也可横跨多行。只要在行尾加上反斜杠，反斜杠和换行符将被转义，即被忽略。这种处理手法也适用于表达式和语句。</em></p><h4 id="2-原始字符串"><a href="#2-原始字符串" class="headerlink" title="2.原始字符串"></a>2.原始字符串</h4><ul><li>原始字符串不以特殊方式处理反斜杠，因此在有些情况下很有用。在常规字符串中，反斜杠扮演着特殊角色：它对字符进行转义，让你能够在字符串中包含原本无法包含的字符。</li><li>在大量使用反斜杠转义字符的场合，可以使用原始字符（用前缀r表示），因为它们不会对反斜杠做特殊处理，而是让字符串包含的每个字符都保持原样。如：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'C:\Program Files\fnord\foo\bar\baz\frozz\bazz'</span><span class="token punctuation">)</span>  C<span class="token punctuation">:</span>\Program Files\fnord\foo\bar\baz\frozz\bazz</code></pre></li><li>注意：<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##(1)引号需要像通常那样进行转义，但这意味着用于执行转义的反斜杠也将包含在最终的字符串中；</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'Let\'s go!'</span><span class="token punctuation">)</span>Let\<span class="token string">'s go!'</span><span class="token comment" spellcheck="true">#（本行后一个'多余）</span><span class="token comment" spellcheck="true">##(2)原始字符串不能以单个反斜杠结尾，除非对其进行转义，如果指定以反斜杠结尾的原始字符串，基本技巧是将反斜杠单独作为一个字符串：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'C:\Program Files\fnord\foo\bar'</span> <span class="token string">'\\'</span><span class="token punctuation">)</span>C<span class="token punctuation">:</span>\Program Files\fnord\foo\bar\<span class="token comment" spellcheck="true">##注意：在制定原始字符串时，可使用单引号或双引号将其括起，还可使用三引号将其括起。</span></code></pre><h4 id="3-Unicode、bytes和bytearray"><a href="#3-Unicode、bytes和bytearray" class="headerlink" title="3.Unicode、bytes和bytearray"></a>3.Unicode、bytes和bytearray</h4></li><li>Python字符串使用Unicode编码来表示文本。大致而言，每个Unicode字符都用一个码点（code point）表示，而码点是Unicode标准给每个字符制定的数字。指定Unicode字符的通用机制为：使用16或32位的十六进制字面量（分别加上前缀\u或\U）或者使用字符的Unicode名称（\N{name}）。</li><li>Python bytes字面量只支持ASCII标准中的128个字符，而余下的128个值必须用转义序列来表示。Unicode与ASCII在字母表规模不同。</li><li>Python还提供了bytearray，它是bytes的可变版。<h2 id="1-11-小结"><a href="#1-11-小结" class="headerlink" title="1.11 小结"></a>1.11 小结</h2></li><li>算法：从本质上说，编写计算机程序就是使用计算机能够理解的语言描述一种算法。这种对机器友好的描述被称为程序，主要由表达式和语句组成。</li><li>表达式：表达式为程序的一部分，结果为一个值。简单表达式是使用运算符和函数将字面值组合起来得到的。通过组合简单的表达式，可创建复杂的表达式。表达式还可能包含变量。</li><li>变量：变量是表示值的名称。通过赋值，可将新值赋给变量。赋值是一种语句。</li><li>函数：类似数学函数，它们可以接受参数，并返回结果。</li><li>模块：模块是扩展，可通过导入它们来扩展Python的功能。</li><li>程序：编写、保存和运行Python程序。</li><li>字符串：字符串是用Unicode码点表示的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 教程 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/02/13/hello-world/"/>
      <url>/2019/02/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
