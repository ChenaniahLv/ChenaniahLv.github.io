<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>思想汇报（4）——对中美贸易争端的看法</title>
      <link href="/2019/02/24/si-xiang-hui-bao-4-dui-zhong-mei-mao-yi-zheng-duan-de-kan-fa/"/>
      <url>/2019/02/24/si-xiang-hui-bao-4-dui-zhong-mei-mao-yi-zheng-duan-de-kan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="思想汇报——对中美贸易争端的看法"><a href="#思想汇报——对中美贸易争端的看法" class="headerlink" title="思想汇报——对中美贸易争端的看法"></a>思想汇报——对中美贸易争端的看法</h1><p>敬爱的党组织：</p><p>2018年无论是我国还是世界范围上，受到关注度最高的新闻中一定有中美贸易争端。</p><ul><li>贸易争端起源于美国总统特朗普于2018年月签署备忘录，宣布依据1974年贸易法第301条，指示美国贸易代表对从中国进口的商品征收灌水，以“惩罚中国偷窃美国知识产权和商业秘密”，涉及商品总计600亿美元。而之后中国商务部其后作出反制措施，向进口的128中美国商品增加关税，其中包括美国向中国出口最多的大豆。</li><li>中美双方曾经一度于2018年5月达成暂停贸易战的共识，并发表联合声明寻求和解，但美国贸易代表办公室仍然于6月公布对华加征关税的清单。中国随即作出反应，商务部重启对美输华多项产品的反倾销调查。</li><li>2018年7月，特朗普政府正式对来自中国价值340亿美元的商品加征25％关税，标志着特朗普政府对华关税政策正式事实。我国商务部指出，“美国违犯世贸规则，发动了迄今为止经济史上规模最大的贸易战”。</li><li>而在2018年12月，G20峰会上，两国领导人习近平于特朗普达成共识，同意进行为期90日的谈判，并在谈判期内暂停新的贸易措施。</li></ul><p>中美贸易争端的大致过程便是这样。美国违反贸易规则，对中国商品实施不公平的对待，是美国贸易保护主义抬头的征兆，也是特朗普“美国优先”战略的过分实施。</p><p>大一我上过一门通识核心课程“非传统安全”，课程中强调了“人类命运共同体”这个名词，在如今全球化趋势不断深化的现状下，没有一个国家或地区能够逆全球化的大势，独善其身。某一个地区开始的或某几个国家造成的经济波澜会在全球化的增幅下增长为一个经济海啸，给全球经济造成史无前例的巨大打击。1929年始于美国华尔街的经济危机席卷全球，最后成为诱发二战的根本原因。那中美这两个世界上最大的经济体之间的贸易争端如果任由其发展下去，那么后果是无比严重的。中国学者结合中国传统思想，给出了一个应对全球地区间危机的中国智慧——和合主义。“和合主义”简单地讲便是我们都知道的“合则两利，战则两伤”，中美互为对方最重要的贸易伙伴，倘若合作共赢，那双方经济互补，各有所获，二者在世界上巨大的经济影响力，能够显著缓解全球经济低迷的态势，带动区域经济发展。</p><p>而如今美国挑起的贸易战，其消极影响是显著的：贸易争端开始后，欧美股市暴跌，随后扩大到亚洲，爆发当日，道指下跌724.42点。跌幅达2.93%。亚太股市则全面下跌，跌幅多从1%起，最多超过4%，下跌最多的为日本的日经平均指数。同时，黄金价格大涨。互相对立贸易措施的后果无论是对中美还是世界上其他国家和地区，都是不可承受的。</p><p>而探究美国发动贸易战的原因，很多国内外媒体将其归结为美国特朗普政府对中国“中国制造2025”计划正常进行的遏制。美国在贸易战中后期增加了禁售项目，皆被认为是对中国的建设和发展有利的高新技术产品，而对中兴的制裁以及前几日对华为孟晚舟的无故拘禁，也是美国对我国的限制。这是世界上旧的“一极”与世界上新兴的最大的发展中强国之间的博弈，但影响的，却无疑是整个世界。</p><p>即使如今我国发展蒸蒸日上，但欧美对中国仍然有很多的技术封锁。日用电器中，手机电脑的CPU绝大多数来自美国英特尔高通等行业巨头，软件系统绝大多数来自微软和谷歌；在科研领域，仍然有尖端设备的采购是受限制的……无疑，我国目前应该清醒地认识到，我国的技术储备与美国仍然有着巨大的差距。而无论是当初的“科教兴国”，还是如今的“中国制造2025”，都是中国参与世界技术博弈决不可少的战略。而我国目前的工业全产业链以及对高新产业的大力扶持无疑是正确的，是有利于我国在贸易争端中获得话语权的。</p><p>而同时，我国目前存在的房产等金融经济泡沫仍然不可小觑，实体经济实体产业的低迷也应该警示。娱乐圈某人偷税漏税罚款金额足够一个中等收入居民赚“上下五千年”的现象也应该予以遏止。</p><p>总之，我国坚持党的正确领导，有决心也有能力应对风起云涌、诡谲莫测的外部环境。我等身在大学中的青年也当为中国高新技术发展添砖加瓦！</p><p>2019年2月24日 Lv-Xinsheng</p><p><img src="https://s2.ax1x.com/2019/02/24/k4W95n.jpg" alt="中美贸易争端"></p>]]></content>
      
      
      <categories>
          
          <category> 入党 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入党 </tag>
            
            <tag> 思想汇报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思想汇报（2）——反邪教</title>
      <link href="/2019/02/21/si-xiang-hui-bao-2-fan-xie-jiao/"/>
      <url>/2019/02/21/si-xiang-hui-bao-2-fan-xie-jiao/</url>
      
        <content type="html"><![CDATA[<h1 id="思想汇报——反邪教"><a href="#思想汇报——反邪教" class="headerlink" title="思想汇报——反邪教"></a>思想汇报——反邪教</h1><p>尊敬的党组织：</p><p>应党组织的要求，我对邪教进行了一些了解，感悟良多。</p><p>要反对或者消灭某件事，必须要先行深入了解这件事。当中国特色社会主义发展如火如荼，人民社会风尚日渐天朗气清的今天，邪教于我们新时代青年仿佛已经是一个遥远的名词，如今邪教于我们，也许只是小学初中教科书上那隐隐约约记得的字眼，是儿时依稀听闻的“天安门广场自焚事件”，是现在偶尔在公园等地的墙上还能看到的“反邪教”的字样……即便作为一个入党积极分子，我在之前对邪教的印象也只限如此，甚至不知道为何“反邪教”这一好像已经过时的话题竟然可以称为我们思想汇报中必备的一篇主题。</p><p>了解之后才发现，在社会主义精神文明的建设中，“反对邪教”仍然是不可忽视的一环。</p><p>在百度百科上，邪教的定义是指冒用宗教、气功或其他名义建立，神话首要分子，利用制造、散步歪理等手段蛊惑、蒙骗他人，发展、控制成员，危害社会的非法阻止。邪教大多是以传播宗教教义、拯救人类为幌子，散布谣言，且通常有一个自称开悟的具有超自然力量的教主，以秘密结社的组织形式控制群众，一般以不择手段地敛取钱财为主要目的。</p><p>再搜集一下现代国内外的邪教事件，发现邪教之恶行简直罄竹难书：</p><ul><li>1978年，美国邪教组织“人民圣殿教”的信徒在教主的胁迫下，在南美洲集体自杀，共913人氰化物中毒身亡，其中包括276个儿童。</li><li>1993年，“大卫教派”在美国德克萨斯州一处庄园与军警对峙，最终81名邪教成员以及教主集体自焚。</li><li>1994年，邪教组织“太阳圣殿教”的53名教徒在加拿大和瑞士集体自杀。</li><li>1995年，日本邪教组织“奥姆真理教”在东京地铁内释放沙林毒气，造成12人死亡，超过5000人中毒。</li><li>2000年，乌干达邪教组织“恢复上帝十诫运动”集体焚烧信徒，超过1000人死亡。</li><li>2001年，5名“法轮功”邪教组织信徒在北京天安门广场自焚，造成2人死亡，3人重伤。</li><li>2014年，山东省6名全能神教徒因所要电话号码未果，残暴打死一人。</li><li>……</li></ul><p>一桩桩一件件骇人听闻的恐怖事件，将邪教的反人类、反社会特质昭示地一清二楚。但除此之外，邪教最重要的特征是什么呢？在我看来，应该是邪教的控制性！</p><ul><li>首先是对行为的控制，邪教往往会对教徒有强硬的规则和惩罚制度，甚至在其衣着、食物、活动空间、往来者等都有事无巨细的限制，若不遵从邪教的行为控制，往往会受到其他邪教徒疯狂的非法对待。</li><li>其次是信息的控制，邪教通过控制教徒的生活空间和信息来源，并决定教徒可以知道的信息内容，形成教内和教外相对立的局面。</li><li>然后是思维控制，邪教将教义定为真理而奉为圭臬，宣扬和使用二元论，禁止批评教主和教义，通过长期冥想、咏唱和祷告来压制教徒的思考，不允许容纳其他信仰，</li><li>最后是情绪控制，邪教让教徒相信，所有的问题都是自己或者邪教之外的社会元素的错误，而教主等是不会错的。它们过度夸大罪恶感、恐惧感，并强化这种情绪，让教徒对教外的人或事产生恐惧和厌恶，对邪教产生病态的依赖。</li></ul><p>通过四种控制，教徒彻底沦为教主等邪教干部的工具，其自身的钱财甚至生命都会被邪教用来谋取私利。这在李洪志的法轮功中体现的淋漓尽致。五名信徒在天安门广场自焚，而李洪志本人则在1995年见势不对后就用信众的血汗移民美国，远程控制并制造着国内信众的一系列疯狂举动。并在国家将其定义为邪教之后死性不改，甘当反动势力的走狗，这几年来从未停止对大陆的渗透。</p><p>而即使国家在大力压制邪教，不懈宣传邪教的危害，让百姓远离邪教，邪教的嚣张气焰已经被沉重地打击。但是，人民币上经常可以见到的法轮功宣传标语和反党标语、维基百科上对“法轮功”词条的曲解、有时可以接到的反党反社会的骚扰电话以及2014全能神教徒杀人事件，都证明着这场对邪教的战争仍然不能宣告胜利，这仍然是一场旷日持久的战争。</p><p>身为正在接受高等教育，并正在努力向党组织靠拢的大学生，我们显然不能对这个现象坐视不理。毕竟，象征着国家最先进最活跃思想的大学生群体，可能会忽略一些细微的现象，但是，当邪教进入我们的视野，那我们同样将不会放下心中那把斩向一切反人类反社会反动势力的利刃！</p><p>对待邪教，我党坚持“区分矛盾、区别对待、宽严相济”的原则，分清犯错和犯罪问题，区分不同情况，该宽就宽，该严就严，对邪教教主等首恶绝不姑息，对上当受骗的无辜群众，采取团结教育挽救的方针。</p><p>从个人，我们也应该保证身边的同学父母亲人无人受邪教蛊惑，发现邪教踪迹时积极配合相关部门调查，为打赢这场反邪教的战争贡献自己的一份力量。</p><p>以上就是我关于“反邪教”主题的思想汇报。</p><p>2018年8月20日 Lv-Xinsheng</p><p><img src="https://s2.ax1x.com/2019/02/18/kc8zFS.jpg" alt="反邪教（图片侵删）"></p>]]></content>
      
      
      <categories>
          
          <category> 入党 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入党 </tag>
            
            <tag> 思想汇报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思想汇报（1）——十九大报告学习</title>
      <link href="/2019/02/18/si-xiang-hui-bao-1-shi-jiu-da-bao-gao-xue-xi/"/>
      <url>/2019/02/18/si-xiang-hui-bao-1-shi-jiu-da-bao-gao-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="思想汇报——十九大报告学习"><a href="#思想汇报——十九大报告学习" class="headerlink" title="思想汇报——十九大报告学习"></a>思想汇报——十九大报告学习</h1><p>尊敬的党组织：</p><p>由于上课原因，当初并没有观看习主席进行十九大报告时的直播，之后虽然零零散散地根据一些公众号和积极分子培训班进行了一些学习，但是仍然没有整体看过。最近我又重新找出了习主席进行十九大报告时的录像，从头到尾看了一遍，心存震撼。</p><p>2017年10月18日，习近平代表第十八届中央委员会在中国共产党第十九次全国代表大会上做报告。210分钟，32440余字，习主席对中国共产党的初心作了强调，对十八大以来的工作做了总结，更对未来提出了希冀与展望。“中国特色社会注意进入了新时代”、“新时代中国共产党的历史使命”、“新时代中国特色社会主义思想”、“我国社会的主要矛盾已经转化”、“三个必须”、“四个伟大”、“五个更加自觉”、“八个明确”……三万余字的报告无疑干货满满。</p><p>大会的主题即为“不忘初心，牢记使命”，那我党的使命是什么？就是为中国人民谋幸福，为中华民族谋复兴。这个初心和使命是激励千千万万共产党人不断前进的根本动力，党员和群众永远同呼吸、共命运、心连心，永远把人民对于美好生活的向往当作奋斗目标，继续朝着实现中华民族伟大复兴的宏伟目标奋勇前进。</p><p>十八大以来的五年是不平凡的五年，面对外部环境的挑战和自身经济进入新常态的变换，我们党和国家稳中求进、迎难而上、开拓进取，在经济建设、全面深化改革、民主法制建设、思想文化建设、生态文明建设……都取得了历史性的成就。五年来的成就是全方位的、开创性的，五年来的变革是深层次的、根本性的。五年来，新理念新思想新战略、重大方针政策、重大工作……我们党以一贯的政治勇气和责任担当，推动了党和国家事业的历史性变革，推动了中国特色社会主义进入了新时代。</p><p>五年来，基本上年年的年度关键词都有“反腐倡廉”，我党在面临重大风险考和党内存在的突出问题，保持反腐的高压态势，正风肃纪，反腐惩恶。让党的政治生活气象更新，政治生态明显好转，党的创造力、凝聚力、战斗力显著增强，我党焕发出新的强大的生机与活力，为党和国家事业的发展提供了坚强的政治保证。</p><p>十九大上面有一个重要的强调，让文科生们都开玩笑说之前的白背了，即为我国主要社会矛盾的变化：我国社会主要矛盾已经转化为人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾。这个社会主要矛盾的改变，乍一看很突然，但是仔细一想，我们熟悉的“社会主义初级阶段主要矛盾”，是在1981年就已经指出的，是我国日益增长的物质文化需要同落后的社会生产之间的矛盾，而距离2017年十九大已经过去了36年，这三十多年来，我国的发展举世瞩目，我们早已陆续富起来，甚至进入了全面建成小康社会的决胜阶段，开始了一轮又一轮的脱贫攻坚，之前所谓“落后的”社会生产早已不再落后，已经能大致满足人民的“物质文化需要”。但是，乡村城镇、内陆沿海等人民的贫富差距加大，年轻人的就业压力加大，这些都是“不平衡、不充分”的体现，也是我们党，我们国家需要着力解决的矛盾。</p><p>党的十九大强调了四个“伟大”，伟大斗争、伟大工程、伟大视野、伟大梦想，四个伟大紧密联系、相互贯通、相互作用，其中起决定性作用的是建设新的伟大工程。实现伟大梦想、进行伟大斗争、建设伟大工程、推进伟大事业，才能确保党在世界形势深刻变化的历史进程中始终走在时代前列，在应对国内外各种风险和考验的历史进程中始终成为全国人民的主心骨，在坚持和发展中国特色社会主义的进程中始终成为坚强的领导核心。</p><p>另外，五个“更加自觉”、八个“明确”、十四个“坚持”等，都为我们党，我们国家之后的工作提供了重要的指导。<br>我们之前即有“三步走”的发展战略：第一步，1981到1990国民生产总值翻番，解决人民温饱；第二步，1991到20世纪末，国民生产总值再翻番，人民生活水平达到小康水平；第三步，到21世纪中叶，国民生产总值再翻番，人均国民生产总值达到中等发达国家水平，实现现代化。而如今，我们已经走到了“第三步”，党的十九大将2020年到本世纪中叶分为两个阶段来安排，第一阶段是从2020年到2035年，在全面建成小康社会的基础上基本实现社会主义现代化，第二阶段从2035年到本世纪中叶，在基本实现现代化的基础省，把我国建设成富强民主文明和谐美丽的社会主义现代化强国。从全面建成小康社会到基本实现现代化，再到全面建成社会主义现代化强国，是新时代中国特色社会主义的战略安排。</p><p>党的十九大报告是总结过去，是分析现在，也是展望将来，它描述了一个富强民主文明和谐的社会主义现代化强国，令人神往。而建设中国特色社会主义的重担必将被我们扛起，我们也将努力学习、学以致用、端正态度、服务群众，朝梦想奋斗，为实现“中国梦”不懈奋斗！</p><p>2018年5月11日 Lv-Xinsheng</p><p><img src="https://s2.ax1x.com/2019/02/24/k4Rg9x.jpg" alt="学习十九大，奋进新时代"></p>]]></content>
      
      
      <categories>
          
          <category> 入党 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入党 </tag>
            
            <tag> 思想汇报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习第5章-条件、循环和其他语句</title>
      <link href="/2019/02/16/python-xue-xi-di-5-zhang-tiao-jian-xun-huan-he-qi-ta-yu-ju/"/>
      <url>/2019/02/16/python-xue-xi-di-5-zhang-tiao-jian-xun-huan-he-qi-ta-yu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="第五章-条件、循环和其他语句"><a href="#第五章-条件、循环和其他语句" class="headerlink" title="第五章-条件、循环和其他语句"></a>第五章-条件、循环和其他语句</h1><p>我们已经见过几种语句（print语句、import语句和赋值语句），先来看看这些语句的其他一些用法，再深入探讨条件语句和循环语句。然后，我们将介绍列表推导，它们虽然是表达式，但工作原理几乎与条件语句和循环语句相同，最后，我们将介绍pass、del和exec。</p><h2 id="5-1-再谈print和import"><a href="#5-1-再谈print和import" class="headerlink" title="5.1 再谈print和import"></a>5.1 再谈print和import</h2><h3 id="5-1-1-打印多个参数"><a href="#5-1-1-打印多个参数" class="headerlink" title="5.1.1 打印多个参数"></a>5.1.1 打印多个参数</h3><p>我们指导，print可用于打印一个表达式，这个表达式要么是字符串，要么将自动转换为字符串。但实际上，我们可以打印多个表达式，条件是用逗号分隔它们：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Age:'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span>Age<span class="token punctuation">:</span> <span class="token number">42</span><span class="token comment" spellcheck="true">#如我们所见，在参数之间插入了一个空格字符。在我们要合并文本和变量值而又不想使用字符串格式设置功能时，这种行为很有帮助：</span><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">'Gumby'</span><span class="token operator">>></span><span class="token operator">></span> salutation <span class="token operator">=</span> <span class="token string">'Mr.'</span><span class="token operator">>></span><span class="token operator">></span> greeting <span class="token operator">=</span> <span class="token string">'Hello,'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>greeting<span class="token punctuation">,</span> salutation<span class="token punctuation">,</span> name<span class="token punctuation">)</span>Hello<span class="token punctuation">,</span> Mr<span class="token punctuation">.</span> Gumby<span class="token comment" spellcheck="true">#如果字符串变量greeting不包含逗号，如何在结果中添加呢？</span><span class="token comment" spellcheck="true">##不能像下面这样做：因为这样将在逗号前添加一个空格。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>greeting<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> salutation<span class="token punctuation">,</span> name<span class="token punctuation">)</span>Hello<span class="token punctuation">,</span> <span class="token punctuation">,</span> Mr<span class="token punctuation">.</span> Gumby<span class="token comment" spellcheck="true">#下面是一种可行的方案：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>greeting <span class="token operator">+</span> <span class="token string">','</span><span class="token punctuation">,</span> salutation<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##它将逗号和变量greeting相加。</span>Hello<span class="token punctuation">,</span><span class="token punctuation">,</span> Mr<span class="token punctuation">.</span> Gumby<span class="token comment" spellcheck="true">#如果需要，可以自定义分隔符：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'wish'</span><span class="token punctuation">,</span> <span class="token string">'to'</span><span class="token punctuation">,</span> <span class="token string">'register'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'complaint'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'_'</span><span class="token punctuation">)</span>I_wish_to_register_a_complaint<span class="token comment" spellcheck="true">#你还可以自定义结束字符串，以替换默认的换行符。例如，如果将结束字符串指定为空字符串，以后就可继续打印到当前行。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello,'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'world!'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##上述代码打印Hello, world!</span></code></pre><h3 id="5-1-2-导入时重命名"><a href="#5-1-2-导入时重命名" class="headerlink" title="5.1.2 导入时重命名"></a>5.1.2 导入时重命名</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#从模块导入时，通常使用：</span><span class="token keyword">import</span> somemodule<span class="token comment" spellcheck="true">##或使用：</span><span class="token keyword">from</span> somemodule <span class="token keyword">import</span> somefunction<span class="token comment" spellcheck="true">##或：</span><span class="token keyword">from</span> somemodule <span class="token keyword">import</span> somefunction<span class="token punctuation">,</span> anotherfunction<span class="token punctuation">,</span> yetanatherfunction<span class="token comment" spellcheck="true">##或：</span><span class="token keyword">from</span> somemodule <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#仅当你确定要导入模块中的一切，采用最后一种方式。但如果有两个模块，它们都包含函数open，该如何办呢？可以使用第一种方式导入这两种模块，并像下面这样调用函数：</span>module1<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>module2<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#但还有一种办法：在语句末尾添加as子句并指定别名，下面是一个导入整个模块并给它指定别名的例子：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> math <span class="token keyword">as</span> foobar<span class="token operator">>></span><span class="token operator">></span> foobar<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">2.0</span><span class="token comment" spellcheck="true">#下面是一个导入特定函数并给它指定别名的例子：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt <span class="token keyword">as</span> foobar<span class="token operator">>></span><span class="token operator">></span> foobar<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">2.0</span><span class="token comment" spellcheck="true">#对于前面的函数open，可像下面这样导入它们：</span><span class="token keyword">from</span> module1 <span class="token keyword">import</span> open <span class="token keyword">as</span> open1<span class="token keyword">from</span> module2 <span class="token keyword">import</span> open <span class="token keyword">as</span> open2<span class="token comment" spellcheck="true">##注：有些模块（如os.path）组成了层次结构（一个模块位于另一个模块（第十章）中）。</span></code></pre><h2 id="5-2-赋值魔法"><a href="#5-2-赋值魔法" class="headerlink" title="5.2 赋值魔法"></a>5.2 赋值魔法</h2><h3 id="5-2-1-序列解包"><a href="#5-2-1-序列解包" class="headerlink" title="5.2.1 序列解包"></a>5.2.1 序列解包</h3><p>赋值语句我们见过很多，有的给变量赋值，还有的给数据结构的一部分（如列表中的元素和切片，或者字典项）赋值，但还有其他类型的赋值语句。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#可同时（并行）给多个变量赋值：</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token comment" spellcheck="true">#使用这种方式还可以交换多个变量的值：</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token number">2</span> <span class="token number">1</span> <span class="token number">3</span></code></pre><p>实际上，这里执行的操作称为序列解包（或可迭代对象解包）：将一个序列（或任何可迭代对象）解包，并将得到的值储存到一系列变量中。例如：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> values <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> values<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> values<span class="token operator">>></span><span class="token operator">></span> x<span class="token number">1</span></code></pre><p>在这里使用返回元组（或其他序列或可迭代对象）的函数或方法时很有用。加入要从字典中随便获取（或删除）一个键-值对时，可使用方法popitem，它随便获取一个键-值对并以元组的方式返回。接下来，可字节将返回的元组解包到两个变量中：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> scoundrel <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Robin'</span><span class="token punctuation">,</span> <span class="token string">'girlfriend'</span><span class="token punctuation">:</span> <span class="token string">'Marion'</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> key<span class="token punctuation">,</span> value <span class="token operator">=</span> scoundrel<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> key<span class="token string">'girlfriend'</span><span class="token operator">>></span><span class="token operator">></span> value<span class="token string">'Marion'</span><span class="token comment" spellcheck="true">#这让函数能够返回被打包成元组的多个值，然后通过一条赋值语句轻松地访问这些值。</span><span class="token comment" spellcheck="true">#注：要解包的序列包含的元素个数必须与你在等号左边列出的目标个数相同，否则Python将引发异常：</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#14>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>ValueError<span class="token punctuation">:</span> <span class="token operator">not</span> enough values to unpack <span class="token punctuation">(</span>expected <span class="token number">3</span><span class="token punctuation">,</span> got <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#15>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>ValueError<span class="token punctuation">:</span> too many values to unpack <span class="token punctuation">(</span>expected <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#可使用星号运算符（*）来收集多余的值，这样无需确保值和变量的个数相同：</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>rest <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> rest<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#还可以将带星号的变量放在其他位置：</span><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">"Albus Percival Wulfric Brian Dumbledore"</span><span class="token operator">>></span><span class="token operator">></span> first<span class="token punctuation">,</span> <span class="token operator">*</span>middle<span class="token punctuation">,</span> last <span class="token operator">=</span> name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> middle<span class="token punctuation">[</span><span class="token string">'Percival'</span><span class="token punctuation">,</span> <span class="token string">'Wulfric'</span><span class="token punctuation">,</span> <span class="token string">'Brian'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#赋值语句的右边可以是任何类型的序列，但带星号的变量最终包含的总是一个列表。在变量和值和个数相同时亦如此：</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这种收集方式也可用于函数参数列表中。</span></code></pre><h3 id="5-2-2-链式赋值"><a href="#5-2-2-链式赋值" class="headerlink" title="5.2.2 链式赋值"></a>5.2.2 链式赋值</h3><p>链式赋值是一种快捷方式，用于将多个变量关联到同一个值。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#这有点像前一节介绍的并行赋值，但只涉及一个值：</span>x <span class="token operator">=</span> y <span class="token operator">=</span> somefunction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#上述代码与下面的代码等价：</span>y <span class="token operator">=</span> somefunction<span class="token punctuation">(</span><span class="token punctuation">)</span>x <span class="token operator">=</span> y<span class="token comment" spellcheck="true">#注：这两条语句可能与下面的语句不等价：</span>x <span class="token operator">=</span> somefunction<span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">=</span> somefunction<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>有关这方面的详细信息，请参阅5.4.6节介绍相同运算符（is）的部分。</p><h3 id="5-2-3-增强赋值"><a href="#5-2-3-增强赋值" class="headerlink" title="5.2.3 增强赋值"></a>5.2.3 增强赋值</h3><p>可以不编写代码x = x + 1，而将右边表达式中的运算符（这里是+）移到赋值运算符（=）的前面，从而写成x += 1。这称为增强赋值，适用于所有标准运算符，如*、/、%等。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">+=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">*=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token number">6</span><span class="token comment" spellcheck="true">#增强赋值也可以用于其他数据类型（只要使用的双目运算符可用于这些数据类型）：</span><span class="token operator">>></span><span class="token operator">></span> found <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token operator">>></span><span class="token operator">></span> found <span class="token operator">+=</span> <span class="token string">'bar'</span><span class="token operator">>></span><span class="token operator">></span> found <span class="token operator">*=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> found<span class="token string">'foobarfoobar'</span></code></pre><p>通过使用增强赋值，可让代码更紧凑、更简洁，同时在很多情况下的可读性更强。</p><h2 id="5-3-代码块：缩进的乐趣"><a href="#5-3-代码块：缩进的乐趣" class="headerlink" title="5.3 代码块：缩进的乐趣"></a>5.3 代码块：缩进的乐趣</h2><p>代码块是一组语句，可在满足条件时执行（if语句），可执行多次（循环），等等。代码块是通过缩进代码（即在前面加空格）来创建的。</p><p><strong>注</strong>：也可以使用制表符来缩进代码块。Python将制表符解释为移到下一个制表位（相邻制表位相距8个空格），但标准（也是更佳的）做法是只使用空格（而不是使用制表符来缩进），且每级缩进4个空格。</p><p>在同一个代码块中，各行代码的缩进量必须相同。下面的伪代码（并非真正的Python代码）演示了如何缩进：</p><pre><code>    this is a line    this is another line:        this is another block        continuing the same block        the last line of the block    phew, there we escaped the inner block</code></pre><p>在很多语言中，都使用一个特殊的单词或字符（如begin或{）来标识代码块的起始位置，并使用另一个特殊的单词或字符（如end或}）来标识结束位置。在Python中，使用冒号（:）指出接下来是一个代码块，并将该代码块中的每行代码都缩进相同的程度。发现缩进量与之前相同时，我们就知道当前代码块到此结束了。（很多用于编程的编辑器（如vscode）和IDE（如PyCharm）指导如何缩进代码块，可帮助我们轻松地正确缩进。）</p><p>下面来看代码块的用途。</p><h2 id="5-4-条件和条件语句"><a href="#5-4-条件和条件语句" class="headerlink" title="5.4 条件和条件语句"></a>5.4 条件和条件语句</h2><p>到目前为止，在我们编写的程序中，语句都是逐条执行的。现在更进一步，让程序选择是否执行特定的程序块。</p><h3 id="5-4-1-这正是布尔值的用武之地"><a href="#5-4-1-这正是布尔值的用武之地" class="headerlink" title="5.4.1 这正是布尔值的用武之地"></a>5.4.1 这正是布尔值的用武之地</h3><p>用作布尔表达式（如用作if语句中的条件）时，下面的值都将被解释器视为假：</p><pre class=" language-python"><code class="language-python"><span class="token boolean">False</span>  None  <span class="token number">0</span>  <span class="token string">""</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>换而言之，标准值False和None、各种类型（包括浮点数、复数等）的数值为0、空序列（如空字符串、空元组和空列表）以及空映射（如空字典）都被视为假，而其他各种值都被视为真，包括特殊值True。</p><p>这意味着任何Python值都可以解释为真值，标准真值为True和False。实际上，Ture和False不过是0和1的别名，虽然看起来不同，但作用是相同的。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">False</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">False</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span> <span class="token operator">+</span> <span class="token boolean">False</span> <span class="token operator">+</span> <span class="token number">42</span><span class="token number">43</span></code></pre><p>因此，如果我们看到一个返回1或0的表达式，就知道这实际上意味着True或False。</p><p>布尔值True和False属于类型bool，而bool和list、str和tuple一样，可用来转换其他值。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bool<span class="token punctuation">(</span><span class="token string">'I think, therefore I am'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> bool<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> bool<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> bool<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token comment" spellcheck="true">#鉴于任何值都可以用作布尔值，因此我们几乎不需要显式地进行转换（Python会自动转换）</span></code></pre><p>注：虽然[]和””都为假（即bool([]) == bool(“”) == False），但它们并不相等（即[] != “”）。对其他各种为假的对象来说，情况亦如此（一个更显然的例子是() != False）。</p><h3 id="5-4-2-有条件地执行和if语句"><a href="#5-4-2-有条件地执行和if语句" class="headerlink" title="5.4.2 有条件地执行和if语句"></a>5.4.2 有条件地执行和if语句</h3><p>真值可以合并，至于如何合并稍后再将，先看看真值可以用来做什么：</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'What is your name? '</span><span class="token punctuation">)</span><span class="token keyword">if</span> name<span class="token punctuation">.</span>endswich<span class="token punctuation">(</span><span class="token string">'Gumby'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, Mr. Gumby'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#str.endswith(suffix[, start[, end]])用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False。可选参数"start"与"end"为检索字符串的开始与结束位置。</span></code></pre><p>这就是if语句，让我们能够有条件地执行代码。这意味着如果条件（if和冒号之间的表达式）为前面定义的真，就执行后续代码块（这里是一条print语句）；如果条件为假，就不执行。</p><h3 id="5-4-3-else子句"><a href="#5-4-3-else子句" class="headerlink" title="5.4.3 else子句"></a>5.4.3 else子句</h3><p>在前一节的示例中，如果你输入以Gumby结尾的名字，方法name.endswith将返回True，导致后续代码块执行——打印问候语。如果你愿意，可以使用else子句增加一种选择（之所以叫子句是因为else不是独立的语句，而是if语句的一部分）。</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'What is your name?'</span><span class="token punctuation">)</span><span class="token keyword">if</span> name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'Gumby'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, Mr. Gumby'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, stranger'</span><span class="token punctuation">)</span></code></pre><p>还有一个与if语句很像的“亲戚”：条件表达式，下面的表达式使用if和else确定其值：</p><pre class=" language-python"><code class="language-python">status <span class="token operator">=</span> <span class="token string">"friend"</span> <span class="token keyword">if</span> name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"Gumby"</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"stranger"</span><span class="token comment" spellcheck="true">#如果条件（紧跟在if后面）为真，表达式的结果为提供的第一个值（这里为"friend"），否则为第二个值"stranger"。</span></code></pre><h3 id="5-4-4-elif子句"><a href="#5-4-4-elif子句" class="headerlink" title="5.4.4 elif子句"></a>5.4.4 elif子句</h3><p>要检查多个条件，可使用elif。elif是else if的缩写，由一个if子句和一个else子句组合而成，也就是包含条件的else子句。</p><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'Enter a number: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The number is positive'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The number is negative'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The number is zero'</span><span class="token punctuation">)</span></code></pre><h3 id="5-4-5-代码嵌套"><a href="#5-4-5-代码嵌套" class="headerlink" title="5.4.5 代码嵌套"></a>5.4.5 代码嵌套</h3><p>我们可以将if语句放在其他if语句块中，如下所示：</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'What is your name? '</span><span class="token punctuation">)</span><span class="token keyword">if</span> name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'Gumby'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'Mr.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, Mr. Gumby'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'Mrs.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, Mrs. Gumby'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, stranger'</span><span class="token punctuation">)</span></code></pre><h3 id="5-4-6-更复杂的条件"><a href="#5-4-6-更复杂的条件" class="headerlink" title="5.4.6 更复杂的条件"></a>5.4.6 更复杂的条件</h3><p>这就是我们需要指导的有关if语句的全部知识。下面来说说条件本身，因为它们是有条件执行中最有趣的部分。</p><h4 id="1-比较运算符"><a href="#1-比较运算符" class="headerlink" title="1. 比较运算符"></a>1. 比较运算符</h4><p>在条件表达式中，最基本的运算符可能是比较运算符，它们用于执行比较。</p><table><thead><tr><th style="text-align:center">表达式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">x == y</td><td style="text-align:left">x等于y</td></tr><tr><td style="text-align:center">x &lt; y</td><td style="text-align:left">x小于y</td></tr><tr><td style="text-align:center">x &gt; y</td><td style="text-align:left">x大于y</td></tr><tr><td style="text-align:center">x &gt;= y</td><td style="text-align:left">x大于或等于y</td></tr><tr><td style="text-align:center">x &lt;= y</td><td style="text-align:left">x小于或等于y</td></tr><tr><td style="text-align:center">x != y</td><td style="text-align:left">x不等于y</td></tr><tr><td style="text-align:center">x is y</td><td style="text-align:left">x和y是同一个对象</td></tr><tr><td style="text-align:center">x is not y</td><td style="text-align:left">x和y是不同的对象</td></tr><tr><td style="text-align:center">x in y</td><td style="text-align:left">x是容器（如序列）y的成员</td></tr><tr><td style="text-align:center">x not in y</td><td style="text-align:left">x不是容器（如序列）y的成员</td></tr></tbody></table><p>与赋值一样，Python也支持链式比较：可同时使用多个比较运算符，如0 &lt; age &lt; 100。</p><p>下面是一些需要特别注意的比较运算符：</p><h5 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h5><p>要确定两个对象是否相等，可使用比较运算符，用两个等号（==）表示。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"foo"</span> <span class="token operator">==</span> <span class="token string">"foo"</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"foo"</span> <span class="token operator">==</span> <span class="token string">"bar"</span><span class="token boolean">False</span></code></pre><h5 id="is：相同运算符"><a href="#is：相同运算符" class="headerlink" title="is：相同运算符"></a>is：相同运算符</h5><p>这个运算符很有趣，其作用看似与==一样，但实际上并非如此。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">==</span> y<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">==</span> z<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token keyword">is</span> y<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token keyword">is</span> z<span class="token boolean">False</span></code></pre><p>is检查两个对象是否相同（而不是相等）。变量x和y指向同一个列表，而z指向另一个列表（其中包含的值以及这些值的排列顺序都与前一个列表相同）。这两个列表虽然相等，但并非是同一个对象。</p><p>总之，==用来检查两个对象是否相等，而is用来检查两个对象是否相同（是同一个对象）。</p><h5 id="in：成员资格运算符"><a href="#in：成员资格运算符" class="headerlink" title="in：成员资格运算符"></a>in：成员资格运算符</h5><p>运算符in在2.2.5节介绍过，与其他比较运算符一样，它也可用于条件表达式中。</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'What is your name?'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">'s'</span> <span class="token keyword">in</span> name<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Your name contains the letter "s".'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Your name does not contains the letter "s".'</span><span class="token punctuation">)</span></code></pre><h5 id="字符串和序列的比较"><a href="#字符串和序列的比较" class="headerlink" title="字符串和序列的比较"></a>字符串和序列的比较</h5><p>字符串是根据字符的字母排列顺序进行比较的。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"alpha"</span> <span class="token operator">&lt;</span> <span class="token string">"beta"</span><span class="token boolean">True</span> <span class="token comment" spellcheck="true">#虽然基于的字母排列顺序，但字母都是Unicode字符，它们是按照码点排列的。</span><span class="token comment" spellcheck="true">#实际上，字符是根据顺序值排列的。要获悉字母的顺序值，可使用函数ord。这个函数的作用与函数chr相反：</span><span class="token operator">>></span><span class="token operator">></span> ord<span class="token punctuation">(</span><span class="token string">"H"</span><span class="token punctuation">)</span><span class="token number">72</span><span class="token operator">>></span><span class="token operator">></span> chr<span class="token punctuation">(</span><span class="token number">128584</span><span class="token punctuation">)</span><span class="token string">'\U0001f648'</span><span class="token operator">>></span><span class="token operator">></span> chr<span class="token punctuation">(</span><span class="token number">72</span><span class="token punctuation">)</span><span class="token string">'H'</span><span class="token comment" spellcheck="true">#涉及大写字母时，可以使用字符串方法lower忽略大小写来比较大小写字母的顺序。</span><span class="token comment" spellcheck="true">#其他序列的比较方式与此相同，但这些顺序包含的元素可能不是字符，而是其他类型的值：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token boolean">True</span><span class="token comment" spellcheck="true">#如果序列的元素为其他序列，将根据同样的规则对这些元素进行比较：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token boolean">True</span></code></pre><h4 id="2-布尔运算符"><a href="#2-布尔运算符" class="headerlink" title="2. 布尔运算符"></a>2. 布尔运算符</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#假设我们要编写一个程序，让它读取一个数，并检查这个数是否位于1～10（含）。为此，可像下面这样做：</span>number <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'Enter a number between 1 and 10: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> number <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> number <span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Great!'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Wrong!'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Wrong!'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这可行，但是我们输入了print('Wrong!')两次，稍显笨拙，可以如下修改：</span>number <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'Enter a number between 1 and 10: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> number <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token operator">and</span> number <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Great!'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Wrong!'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##通过使用链式比较1 &lt;= number &lt;= 10可进一步简化这个示例。</span></code></pre><p>运算符and是一个布尔运算符。它接受两个真值，并在这两个真值都为真时返回真，否则返回假。还有另外两个布尔运算符：or和not。通过使用这三个运算符，能以任何方式组合真值。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cash <span class="token operator">></span> price<span class="token punctuation">)</span> <span class="token operator">or</span> customer_has_good_credit<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> out_of_stock<span class="token punctuation">:</span>    give_goods<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>短路逻辑和条件表达式</strong>：</p><p>布尔运算符有个有趣的特征：只做必要的计算。例如，仅当x和y都为真时，表达式x and y才为真。因此如果x为假，这个表达式将立即返回假，而不管y。实际上，如果x为假，这个表达式将返回x，否则返回y。这种行为称为<em>短路逻辑</em>（或者<em>延迟求值</em>）：布尔运算符常被称为逻辑运算符，如我们所见，在有些情况下将绕过第二个值。对于运算符or，情况亦是如此。需要注意的是，位于布尔运算符后面的代码（如函数调用）可能根本不会执行。</p><h3 id="5-4-7-断言"><a href="#5-4-7-断言" class="headerlink" title="5.4.7 断言"></a>5.4.7 断言</h3><p>if语句有一个很有用的“亲戚”，其工作原理类似于下面的伪代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">not</span> condition<span class="token punctuation">:</span>    crash program</code></pre><p>编写这样的代码是为了让程序在错误条件出现时立即崩溃胜过以后再崩溃。基本上，我们可以要求某些条件得到满足（如核实函数参数满足要求或为初始测试和调试提供帮助），为此可在语句中使用关键字assert。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">assert</span> <span class="token number">0</span> <span class="token operator">&lt;</span> age <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token operator">>></span><span class="token operator">></span> age <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">assert</span> <span class="token number">0</span> <span class="token operator">&lt;</span> age <span class="token operator">&lt;</span> <span class="token number">100</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#63>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">assert</span> <span class="token number">0</span> <span class="token operator">&lt;</span> age <span class="token operator">&lt;</span> <span class="token number">100</span>AssertionError<span class="token comment" spellcheck="true">#如果知道必须满足特定条件，程序才能正确运行，可在程序中添加assert语句充当检查点。</span><span class="token comment" spellcheck="true">#还可在条件后面添加一个字符串，对断言做出说明。</span><span class="token operator">>></span><span class="token operator">></span> age <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">assert</span> <span class="token number">0</span> <span class="token operator">&lt;</span> age <span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'The age must be realistic'</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#65>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">assert</span> <span class="token number">0</span> <span class="token operator">&lt;</span> age <span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'The age must be realistic'</span>AssertionError<span class="token punctuation">:</span> The age must be realistic</code></pre><h2 id="5-5-循环"><a href="#5-5-循环" class="headerlink" title="5.5 循环"></a>5.5 循环</h2><p>如果我们希望程序不断地执行下去，直到人为停止，需要编写类似于下面的代码（伪代码）：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> we are't stopped<span class="token punctuation">:</span>    send mail    wait one month</code></pre><h3 id="5-5-1-while循环"><a href="#5-5-1-while循环" class="headerlink" title="5.5.1 while循环"></a>5.5.1 while循环</h3><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> x <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    x <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>还可以使用循环来确保用户输入名字，如下所示：</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">while</span> <span class="token operator">not</span> name<span class="token punctuation">:</span>    name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'Please enter your name: '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, {}!'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#提示：如果我们只是输入一个空格字符，程序将接受这个名字，因为包含一个空格字符的字符串不是空的，因此不会将name视为假。这无疑是这个小程序的一个瑕疵，但很容易修复：只需将while not name改为while not name or name.isspace()或while not name.strip()即可。</span></code></pre><h3 id="5-5-2-for循环"><a href="#5-5-2-for循环" class="headerlink" title="5.5.2 for循环"></a>5.5.2 for循环</h3><p>while语句非常灵活，可用于在条件为真时反复执行代码块。这在通常情况下很好，但有时候我们可能想根据需要进行定制。一种这样的需求是为序列（或其他可迭代对象）中每个元素执行代码块。</p><p>注：基本上，可迭代对象（第九章）是使用for循环进行遍历的对象。</p><p>为此，可使用for语句：</p><pre class=" language-python"><code class="language-python">words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'this'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'an'</span><span class="token punctuation">,</span> <span class="token string">'ex'</span><span class="token punctuation">,</span> <span class="token string">'parrot'</span><span class="token punctuation">]</span><span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#或：</span>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">for</span> number <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span></code></pre><p>鉴于迭代（也就是遍历）特定范围内的数是一种常见的任务，Python提供了一个创建范围的内置函数。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#范围类似于切片。它们包含起始位置（这里为0），但不包含结束位置（这里为10）。在很多情况下，我们都希望起始位置为0。实际上，如果只提供一个位置，将把这个位置视为结束位置，并假定起始位置为0。</span><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#下面的程序打印数1～100：</span><span class="token keyword">for</span> number <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#注：相比前面使用的while循环，这些代码要紧凑得多。</span></code></pre><p>提示：只要能够使用for循环，就不要使用while循环。</p><h3 id="5-5-3-迭代字典"><a href="#5-5-3-迭代字典" class="headerlink" title="5.5.3 迭代字典"></a>5.5.3 迭代字典</h3><p>要遍历字典的所有关键字，可像遍历序列那样使用普通的for语句。</p><pre class=" language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">for</span> key <span class="token keyword">in</span> d<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">'corresponds to'</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#也可使用keys等字典方法来获取所有的键。如果只对值感兴趣，可使用d.values。我们还记得，d.items以元组的方式返回键-值对。for循环的优点之一是，可在其中使用序列解包。</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">'corresponds to'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span></code></pre><p>注：字典元素的排列顺序是不确定的。换而言之，迭代字典的键或值时，一定会处理所有的键或值，但不知道处理的顺序。如果顺序很重要，可将键或值存储在一个列表中并对列表排序，再进行迭代。要让映射记住其项的插入顺序，可使用模块collections中的OrderedDict类。</p><h3 id="5-5-4-一些迭代工具"><a href="#5-5-4-一些迭代工具" class="headerlink" title="5.5.4 一些迭代工具"></a>5.5.4 一些迭代工具</h3><p>Python提供了多个可比昂注迭代序列（或其他可迭代对象）的函数，其中一些位于第十章将介绍的模块itertools中，但还有一些内置函数使用起来也很方便。</p><h4 id="1-并行迭代"><a href="#1-并行迭代" class="headerlink" title="1. 并行迭代"></a>1. 并行迭代</h4><p>有时候，我们可能想要同时迭代两个序列：</p><pre class=" language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'anne'</span><span class="token punctuation">,</span> <span class="token string">'beth'</span><span class="token punctuation">,</span> <span class="token string">'george'</span><span class="token punctuation">,</span> <span class="token string">'damon'</span><span class="token punctuation">]</span>ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#如果要打印名字和对应的年龄，可像下面这样做：</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#i是用作循环索引变量的标准名称。</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> ages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'years old.'</span><span class="token punctuation">)</span></code></pre><p>一个很有用的并行迭代工具是内置函数zip，它将两个序列“缝合起来”，并返回一个由元组组成的序列。返回值是一个适合迭代的对象，要查看其内容，可使用list将其转换为列表。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'anne'</span><span class="token punctuation">,</span> <span class="token string">'beth'</span><span class="token punctuation">,</span> <span class="token string">'george'</span><span class="token punctuation">,</span> <span class="token string">'damon'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>names<span class="token punctuation">,</span> ages<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'anne'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'beth'</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'george'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'damon'</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#缝合后，可在循环中将元素解包。</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> age <span class="token keyword">in</span> zip<span class="token punctuation">(</span>names<span class="token punctuation">,</span> ages<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token string">'years old.'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#函数zip可缝合任意数量的序列。需要指出的是，当序列的长度不同时，函数zip将在最短的序列用完后停止缝合。</span></code></pre><h4 id="2-迭代时获取索引"><a href="#2-迭代时获取索引" class="headerlink" title="2. 迭代时获取索引"></a>2. 迭代时获取索引</h4><p>在有些情况下，我们需要在迭代对象序列的同时获取当前对象的索引。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#例如，你可能像替换一个字符串列表中所有包含子串‘xxx’的字符串。当然，完成这种任务的方法有很多，但这里假设要像下面这样做：</span><span class="token keyword">for</span> string <span class="token keyword">in</span> strings<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'xxx'</span> <span class="token keyword">in</span> string<span class="token punctuation">:</span>        index <span class="token operator">=</span> strings<span class="token punctuation">.</span>index<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#在字符串列表中查找字符串</span>        strings<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'[censored]'</span><span class="token comment" spellcheck="true">#这可行，但是替换前的搜索好像没有必要。另外，如果没有替换，搜索返回的索引可能不对（即返回的是该字符串首次出现处的索引）。下面是一种更佳的解决方案：</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> string <span class="token keyword">in</span> strings<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'xxx'</span> <span class="token keyword">in</span> string<span class="token punctuation">:</span>        strings<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'[censored]'</span>    index <span class="token operator">+=</span><span class="token number">1</span><span class="token comment" spellcheck="true">#这个方案虽然也可以接受，但看起来也优点笨拙。另一种解决方案是使用内置函数enumerate：</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> string <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'xxx'</span> <span class="token keyword">in</span> string<span class="token punctuation">:</span>        strings<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'[censored]'</span><span class="token comment" spellcheck="true">#这个函数让我们能够迭代索引-值对，其中的索引是自动提供的。</span></code></pre><h4 id="3-反向迭代和排序后再迭代"><a href="#3-反向迭代和排序后再迭代" class="headerlink" title="3. 反向迭代和排序后再迭代"></a>3. 反向迭代和排序后再迭代</h4><p>来看另外两个很有用的函数：reversed和sorted。它们类似于列表方法reverse和sort（sorted接受的参数也与sort类似），但可用于任何序列或可迭代的对象，且不就地修改对象，而是返回反转和排序后的版本。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> sorted<span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'!dlrow ,olleH'</span></code></pre><p>请注意，sorted返回一个列表，而reversed像zip那样返回一个更神秘的迭代对象。我们无需关系这到底意味着什么，只管在for循环或join等方法中使用它，不会有任何问题。只是我们不能对它执行索引或切片的操作，也不能直接对它调用列表的方法。要执行这些操作，可先使用list对返回对象进行转换。</p><p>提示：要按字母表排序，可先转换为小写。为此，可将sort或sorted的key参数设置为str.lower。例如，sorted(“aBc”, kye=str.lower)返回[‘a’, ‘B’, ‘c’]。</p><h3 id="5-5-5-跳出循环"><a href="#5-5-5-跳出循环" class="headerlink" title="5.5.5 跳出循环"></a>5.5.5 跳出循环</h3><p>通常，循环会不断执行代码块，指导条件为假或使用完序列中的所有元素。但在有些情况下，我们可能想要中断循环、开始新迭代（进入“下一轮”代码块执行流程）或直接结束循环。</p><h4 id="1-break"><a href="#1-break" class="headerlink" title="1. break"></a>1. break</h4><p>要结束（跳出循环），可使用break。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#假设要找出小于100的最大平方值，可从100开始向下迭代。找到一个平方值后，无需再迭代，因此直接跳出循环。</span><span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt<span class="token keyword">for</span> n <span class="token keyword">in</span> rang<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    root <span class="token operator">=</span> sqrt<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">if</span> root <span class="token operator">==</span> int<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token comment" spellcheck="true">#range有第三个参数——步长，即序列中相邻数的差。通过将步长设置为负数，可让range向下迭代；还可让它跳过一些数：</span><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><h4 id="2-countinue"><a href="#2-countinue" class="headerlink" title="2. countinue"></a>2. countinue</h4><p>语句countinue没有break用得多。它结束当前迭代，并跳到下一次迭代开头。这基本上意味着跳过循环体中余下的语句，但不结束循环。这在循环体庞大而复杂，且存在多个要跳过它的原因时很有用。在这种情况下，可使用countinue，如下所示：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> seq<span class="token punctuation">:</span>    <span class="token keyword">if</span> condition1<span class="token punctuation">:</span> <span class="token keyword">continue</span>    <span class="token keyword">if</span> condition2<span class="token punctuation">:</span> <span class="token keyword">continue</span>    <span class="token keyword">if</span> condition3<span class="token punctuation">:</span> <span class="token keyword">continue</span>    do_something<span class="token punctuation">(</span><span class="token punctuation">)</span>    do_something_else<span class="token punctuation">(</span><span class="token punctuation">)</span>    do_another_thing<span class="token punctuation">(</span><span class="token punctuation">)</span>    etc<span class="token comment" spellcheck="true">#然而，在很多情况下，使用一条if语句就足够了：</span><span class="token keyword">for</span> x <span class="token keyword">in</span> seq<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>condition1 <span class="token operator">or</span> condition2 <span class="token operator">or</span> condition3<span class="token punctuation">)</span><span class="token punctuation">:</span>        do_something<span class="token punctuation">(</span><span class="token punctuation">)</span>        do_something_else<span class="token punctuation">(</span><span class="token punctuation">)</span>        do_another_thing<span class="token punctuation">(</span><span class="token punctuation">)</span>        etc<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>continue虽然是一个很有用的工具，但并非是不可或缺的。然而我们必须熟悉break语句，因为在while True循环中经常用到它，这将在下一小节中讨论。</p><h4 id="3-while-True-break"><a href="#3-while-True-break" class="headerlink" title="3. while True/break"></a>3. while True/break</h4><p>如果我们要在用户根据提示输入单词时执行某种操作，并在用户没有提供单词时结束循环。为此，一种办法如下：</p><pre class=" language-python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'dummyu'</span><span class="token keyword">while</span> word<span class="token punctuation">:</span>    word <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'Please enter a word: '</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#使用这个单词做些事情：</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The word was'</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这些代码运行情况如下：</span>Please enter a word<span class="token punctuation">:</span> firstThe word was firstPlease enter a word<span class="token punctuation">:</span> secondThe word woa secondPlease enter a word<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#这与我们希望的一致，但我们可能想使用单词做些比打印它更有用的事情。然而，这写代码有些难看。为进入循环，我们需要将一个哑值（未用的值）赋给word。像这样的哑值通常昭示着我们的做法不太对。下面尝试消除这个哑值：</span>word <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'Please enter a word: '</span><span class="token punctuation">)</span><span class="token keyword">while</span> word<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#使用这个单词做些事情：</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The word was '</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span>    word <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'Please enter a word: '</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#哑值消除了，但包含重复的代码，如何避免这样的重复呢？可使用while True/break。</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    word <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'Please enter a word: '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> word<span class="token punctuation">:</span> <span class="token keyword">break</span>    <span class="token comment" spellcheck="true">#使用这个单词做些事情：</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The word was '</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span></code></pre><p>while True导致循环永不结束，但我们将条件放在了循环体内的一条if语句中，而这条if语句将在条件满足时调用break。这说明并非只能像常规while循环那样在循环开头结束循环，而是可在循环体的任何地方结束循环。if/break行将整个循环分成两部分：第一部分负责设置，第二部分在循环条件为真时使用第一部分初始化的数据。</p><h3 id="5-5-6-循环中的else子句"><a href="#5-5-6-循环中的else子句" class="headerlink" title="5.5.6 循环中的else子句"></a>5.5.6 循环中的else子句</h3><p>要在循环提前结束时采取某种措施很容易（break），但有时可能想在循环正常结束时才采取某种措施。</p><p>可在循环开始前定义一个布尔变量值并将其设置为False，再在跳出循环时将其设置为True。这样就可在循环后面使用一条if语句来判断循环是否是提前结束的：</p><pre class=" language-python"><code class="language-python">broke_out <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">for</span> x <span class="token keyword">in</span> seq<span class="token punctuation">:</span>    do_something<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">if</span> condition<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        broke_out <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">break</span>    do_something_else<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">not</span> broke_out<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I did't break out!"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#一种更简单的办法是在循环中添加一条else子句，它仅仅在没有调用break时才执行。继续前面讨论break时的示例：</span>form math <span class="token keyword">import</span> sqrt<span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#不包含81</span>    root <span class="token operator">=</span> sqrt<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">if</span> root <span class="token operator">==</span> int<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Didn't find it!"</span><span class="token punctuation">)</span></code></pre><h2 id="5-6-简单推导"><a href="#5-6-简单推导" class="headerlink" title="5.6 简单推导"></a>5.6 简单推导</h2><p>列表推导是一种从其他列表创建列表的方式，类似于数序中的集合推导。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#列表推导的原理非常简单，有点类似于for循环:</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#如果只想打印那些能被3整除的平方值：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#还可以添加更多的for部分：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#作为对比，下面的两个for循环创建同样的列表：</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#与以前一样，使用多个for部分时，也可添加if子句：</span><span class="token operator">>></span><span class="token operator">></span> girls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'alice'</span><span class="token punctuation">,</span> <span class="token string">'bernice'</span><span class="token punctuation">,</span> <span class="token string">'clarice'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> boys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'chris'</span><span class="token punctuation">,</span> <span class="token string">'arnold'</span><span class="token punctuation">,</span> <span class="token string">'bob'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>b<span class="token operator">+</span><span class="token string">'+'</span><span class="token operator">+</span>g <span class="token keyword">for</span> b <span class="token keyword">in</span> boys <span class="token keyword">for</span> g <span class="token keyword">in</span> girls <span class="token keyword">if</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'chris+clarice'</span><span class="token punctuation">,</span> <span class="token string">'arnold+alice'</span><span class="token punctuation">,</span> <span class="token string">'bob+bernice'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##这些代码将名字的首字母相同的男孩和女孩配对。</span></code></pre><p>前述配对示例的效率不太高，因为它要检查每种可能的配对。使用Python解决这个问题的方法有很多，下面是Alex Martelli推荐的解决方案：</p><pre class=" language-python"><code class="language-python">girls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'alice'</span><span class="token punctuation">,</span> <span class="token string">'bernice'</span><span class="token punctuation">,</span> <span class="token string">'clarice'</span><span class="token punctuation">]</span>boys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'chris'</span><span class="token punctuation">,</span> <span class="token string">'arnold'</span><span class="token punctuation">,</span> <span class="token string">'bob'</span><span class="token punctuation">]</span>letterGirls <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> girl <span class="token keyword">in</span> girls<span class="token punctuation">:</span>    letterGirls<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>girl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token operator">+</span><span class="token string">'+'</span><span class="token operator">+</span>g <span class="token keyword">for</span> b <span class="token keyword">in</span> boys <span class="token keyword">for</span> g <span class="token keyword">in</span> letterGirls<span class="token punctuation">[</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这个程序创建一个名为letterGirls的字典，其中每项的键都是一个字母，而值为以这个字母打头的女孩名字组成的列表。创建这个字典后，列表推导遍历所有的男孩，并查找名字首字母与当前男孩相同的所有女孩。这样，这个列表推导就无需尝试所有的男孩和女好组合并检查他们的名字首字母是否相同了。</span></code></pre><p>使用圆括号代替方括号并不能实现元组推导，而是将创建生成器（第九章）。然而，可使用花括号来执行字典推导。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> squares <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span><span class="token string">"{} squared is {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> squares<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token string">'8 squared is 64'</span></code></pre><p>在列表推导中，for前面只有一个表达式，而在字典推导中，for前面有两个用冒号分隔的表达式。这两个表达式分别为键及其对应的值。</p><h2 id="5-7-三人行"><a href="#5-7-三人行" class="headerlink" title="5.7 三人行"></a>5.7 三人行</h2><p>结束本章前，大致介绍一下另外三条语句：pass、del和exec。</p><h3 id="5-7-1-什么都不做"><a href="#5-7-1-什么都不做" class="headerlink" title="5.7.1 什么都不做"></a>5.7.1 什么都不做</h3><p>pass语句什么都不会发生。在编写代码时，可将其用作占位符。例如，我们可能编写了一条if语句并想尝试运行它，但其中可能缺少一个代码块，这些代码将不能运行，因为在Python中代码块不能为空。要修复这个问题，只需要在中间的代码块中添加一条pass语句即可。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Ralph Auldus Melish'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Welcome!'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> name <span class="token operator">==</span> <span class="token string">'Enid'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#还未完成……</span>    <span class="token keyword">pass</span><span class="token keyword">elif</span> name <span class="token operator">==</span> <span class="token string">'Bill Gates'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Access Denied'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#注：也可不使用注释和pass语句，而是插入一个字符串。这种做法尤其适用于未完成的函数（第六章）和类（第七章），因为这种字符串将充当文档字符串（第六章）。</span></code></pre><h3 id="5-7-2-使用del删除"><a href="#5-7-2-使用del删除" class="headerlink" title="5.7.2 使用del删除"></a>5.7.2 使用del删除</h3><p>对于我们不再使用的对象，Python通常会将其删除（因为没有任何变量或数据结构成员指向它），这被称为垃圾收集。</p><p>另一种办法是使用del语句。（第二章和第四章使用这条语句来删除序列和字典）这不仅会删除到对象的引用，还会删除名称本身。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> x<span class="token operator">>></span><span class="token operator">></span> xTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#27>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    xNameError<span class="token punctuation">:</span> name <span class="token string">'x'</span> <span class="token keyword">is</span> <span class="token operator">not</span> defined<span class="token comment" spellcheck="true">#这看似简单，但有时不太好理解。</span><span class="token comment" spellcheck="true">#例如，在下面的示例中，x和y指向同一个列表：</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> x<span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Python"</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">]</span>可能我们通常会认为通过删除x，也将删除y，但并非如此：<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> x<span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#这是因为x和y指向同一个列表，但删除x对y没有任何影响，因为我们只删除名称x，而没有删除列表本身（值）。事实上，在Python中，根本就没有办法删除值，而我们也不需要这样做，因为对于我们不再使用的值，Python解释器会立即将其删除。</span></code></pre><h3 id="5-7-3-使用exec和eval执行字符串及计算其结果"><a href="#5-7-3-使用exec和eval执行字符串及计算其结果" class="headerlink" title="5.7.3 使用exec和eval执行字符串及计算其结果"></a>5.7.3 使用exec和eval执行字符串及计算其结果</h3><p>注：本节介绍如何执行储存在字符串中的Python代码，这样做可能带来严重的安全隐患。如果将部分内容由用户提供的字符串作为代码执行，将无法控制代码的行为。在网络引用程序，如第十五章将介绍的通用网关接口（CGI）脚本中，这样做尤其危险。</p><h4 id="1-exec"><a href="#1-exec" class="headerlink" title="1. exec"></a>1. exec</h4><p>函数exec将字符串作为代码执行。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string">"print('Hello, world!')"</span><span class="token punctuation">)</span>Hello<span class="token punctuation">,</span> world!</code></pre><p>然而，调用函数exec时只给它提供一个参数绝非好事。在大多数情况下，还应向它传递一个命名空间——用于放置变量的地方；否则代码将污染命名空间，即修改变量。</p><p>exec函数主要用于动态地创建代码字符串。如果这种字符串来自其他地方（可能是用户），就几乎无法确定它将包含什么内容。因此为了安全期间，要提供一个字典以充当命名空间。</p><p><strong>注</strong>：命名空间（作用域）是个重要的概念，将在下一章讨论。目前，我们可以将命名空间视为放置变量的地方，类似于一个看不见的字典。因此，当你执行赋值语句x = 1时，将在当前命名空间存储键x和值1。当前命名空间通常是全局命名空间（到目前为止，我们使用的大都是全局命名空间），但并非必然如此。</p><p>为此，添加第二个参数——字典，用作代码字符串的命名空间。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt<span class="token operator">>></span><span class="token operator">></span> scope <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string">'sqrt = 1'</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> sqrt<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">2.0</span><span class="token operator">>></span><span class="token operator">></span> scope<span class="token punctuation">[</span><span class="token string">'sqrt'</span><span class="token punctuation">]</span><span class="token number">1</span><span class="token comment" spellcheck="true">#请注意，如果尝试将scope打印出来，将发现它包含很多内容，这是因为自动在其中添加了包含所有内置函数和值的字典__builtins__。</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> scope<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>dict_keys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'sqrt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="2-eval"><a href="#2-eval" class="headerlink" title="2. eval"></a>2. eval</h4><p>eval是一个类似于exec的内置函数。exec执行一系列Python语句，而eval计算用字符串表示的Python表达式的值，并返回结果（exec什么都不返回，因为它本身是条语句）。例如，我们可以使用如下代码来创建一个Python计算器：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"Enter an arithmetic expression: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Enter an arithmetic expression<span class="token punctuation">:</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">18</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token number">42</span></code></pre><p>与exec一样，也可向eval提供一个命名空间，虽然表达式通常不会像语句那样给变量重新赋值。</p><p>注：虽然表达式通常不会给变量重新赋值，但绝对能够这样做，如调用给全局变量重新赋值的函数。因此，将eval用于不可信任的代码并不比使用exec安全。当前，在Python中执行不可信任的代码时，没有安全的办法。一种替代解决方案是使用Jython（第十七章）等Python实现，以实现Java沙箱等原生机制。</p><p><strong>浅谈作用域</strong>：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#向exec或eval提供命名空间时，可在使用这个命名空间前在其中添加一些值：</span><span class="token operator">>></span><span class="token operator">></span> scope <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> scope<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> scope<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> eval<span class="token punctuation">(</span><span class="token string">'x * y'</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token number">6</span><span class="token comment" spellcheck="true">#同样，同一个命名空间可用于多次调用exec或eval。</span><span class="token operator">>></span><span class="token operator">></span> scope <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string">'x = 2'</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> eval<span class="token punctuation">(</span><span class="token string">'x * x'</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token number">4</span><span class="token comment" spellcheck="true">#采用这种做法可编写出非常复杂的程序，但你也许不应这样做。</span></code></pre><h2 id="5-8-小结"><a href="#5-8-小结" class="headerlink" title="5.8 小结"></a>5.8 小结</h2><p>本章介绍了多种语句。</p><ul><li>打印语句：可以使用print语句来打印多个用逗号分隔的值。如果print语句以逗号结尾，后续print语句将在当前行接着打印。</li><li>导入语句：有时候，我们不喜欢要导入的函数的名称——可能是因为你已将这个名称用作他用。在这种情况下，可使用import…as…语句在本地重命名函数。</li><li>赋值语句：通过使用奇妙的序列解包和链式赋值，可同时给多个变量赋值；而通过使用增强赋值，可就地修改变量。</li><li>代码块：代码块用于通过缩进将语句编组。代码块可用于条件语句和循环中，还可用于函数和类的定义中。</li><li>条件语句：条件语句根据条件（布尔表达式）决定是否执行后续代码块。通过使用if/elif/else，可将多个条件语句组合起来。条件语句的一个变种是条件表达式，如a if b else c。</li><li>断言：断言断定某件事（一个布尔表达式）为真，可包含说明为何必须如此的字符串。如果指定的表达式为假，断言将导致程序停止执行。最好尽早将错误就出来，免得它潜藏在程序中，直到带来麻烦。</li><li>循环：可针对序列中的每个元素（如特定范围内的每个数）执行代码块，也可在条件为真时反复执行代码块。要跳出代码块中余下的代码，直接进入下一次迭代，可使用continue语句；要跳出循环，可使用break语句。另外，还可以在循环末尾添加一个else子句，它将在没有执行循环中的任何break语句时执行。</li><li>推导：推导并不是语句，而是表达式。它们看起来很像循环，因此我们将它们放在循环中讨论。通过列表推导，可从既有列表中创建出性列表，这是通过对列表元素调用函数、提出不想要的函数等实现的。推导功能强大，但在很多情况下，使用普通循环和条件语句也可完成任务，且代码的可读性可能更高。使用类似于列表推导的表达式可创建出字典。</li><li>pass、del、exec和eval：pass语句什么都不做，但适合用作占位符。del语句用于删除变量或数据结构的成员，但不能用于删除值。函数exec用于将字符串作为Python程序执行。函数eval计算用字符串表示的表达式并返回结果。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 教程 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习第4章-当索引行不通时：字典</title>
      <link href="/2019/02/14/python-xue-xi-di-4-zhang-dang-suo-yin-xing-bu-tong-shi-zi-dian/"/>
      <url>/2019/02/14/python-xue-xi-di-4-zhang-dang-suo-yin-xing-bu-tong-shi-zi-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="第四章-当索引行不通时：字典"><a href="#第四章-当索引行不通时：字典" class="headerlink" title="第四章-当索引行不通时：字典"></a>第四章-当索引行不通时：字典</h1><p>需要将一系列值组合成数据结构并通过编号来访问各个值时，列表很有用。本章介绍一种可通过名称来访问其各个值的数据结构。这种数据结构称为映射（mapping）。字典是Python中唯一的内置映射类型，其中的值不按顺序排列，而是储存在键下。键可能是数、字符串或元组。</p><h2 id="4-1-字典的用途"><a href="#4-1-字典的用途" class="headerlink" title="4.1 字典的用途"></a>4.1 字典的用途</h2><p>字典的名称指出了这种数据结构的用途。普通图书适合从头到尾的顺序阅读，如果你愿意，可以快速翻到任意一页，这有点像Python中的列表。字典（日常生活中的字典和Python字典）旨在让你能够轻松地找到特定的单词（键），以获悉其定义（值）。</p><p>在很多情况下，使用字典都比使用列表更合适。下面是Python字典的一些用途：</p><ul><li>表示棋盘的状态，其中每个键都是由坐标组成的元组；</li><li>储存文件修改时间，其中的键为文件名；</li><li>数字电话/地址簿。</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##假设由如下名单：</span><span class="token operator">>></span><span class="token operator">></span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Beth'</span><span class="token punctuation">,</span> <span class="token string">'Cecil'</span><span class="token punctuation">,</span> <span class="token string">'Dee-Dee'</span><span class="token punctuation">,</span> <span class="token string">'Earl'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##如果要创建一个小型数据库，在其中储存这些人的电话号码，该如何办呢？一种办法是再创建一个列表。假设只储存四位的分机号，这个列表将类似于：</span><span class="token operator">>></span><span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'2341'</span><span class="token punctuation">,</span> <span class="token string">'9102'</span><span class="token punctuation">,</span> <span class="token string">'3158'</span><span class="token punctuation">,</span> <span class="token string">'0142'</span><span class="token punctuation">,</span> <span class="token string">'5551'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##创建这些列表后，就可以像下面这样查找Cecil的电话号码：</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span>names<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Cecil'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token string">'3158'</span></code></pre><p>这可行，但不太实用。实际上，我们希望能直接像下面这样做：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> phonebook<span class="token punctuation">[</span><span class="token string">'Cecil'</span><span class="token punctuation">]</span><span class="token string">'3158'</span></code></pre><p>如何达成这个目的呢？只要phonebook是个字典就行了。</p><h2 id="4-2-创建和使用字典"><a href="#4-2-创建和使用字典" class="headerlink" title="4.2 创建和使用字典"></a>4.2 创建和使用字典</h2><p>字典以类似于下面的方式表示：</p><pre class=" language-python"><code class="language-python">phonebook <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Alice'</span><span class="token punctuation">:</span> <span class="token string">'2341'</span><span class="token punctuation">,</span> <span class="token string">'Beth'</span><span class="token punctuation">:</span> <span class="token string">'9102'</span><span class="token punctuation">,</span> <span class="token string">'Cecil'</span><span class="token punctuation">:</span> <span class="token string">'3258'</span><span class="token punctuation">}</span></code></pre><p>字典由键及其对应的值组成，这种键-值对称为项（item）。在前面的示例中，键为名字，而值为电话号码。每个键与其值之间都用冒号（：）分隔，项之间用逗号分隔，而整个字典放在花括号内。空字典（没有任何项）用两个花括号表示，类似于：{}。</p><p>注：在字典（以及其他映射类型）中，键必须是独一无二的，而字典中的值无需如此。</p><h3 id="4-2-1-函数dict"><a href="#4-2-1-函数dict" class="headerlink" title="4.2.1 函数dict"></a>4.2.1 函数dict</h3><p>可使用函数dict从其他映射（如其他字典）或键-值对序列中创建字典。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> item <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'Gumby'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> dict<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Gumby'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token string">'Gumby'</span></code></pre><p>还可使用关键字实参来调用这个函数，如下所示：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> dict<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Gumby'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Gumby'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">}</span></code></pre><p>尽管这可能是函数dict最常见的用法，但可使用一个映射实参来调用它，这将创建一个字典，其中包含指定映射中的所有项。像函数list、tuple和str一样，如果调用这个函数时没有提供任何实参，将返回一个空字典。从映射创建字典时，如果该映射也是字典（毕竟字典是Python中唯一的内置映射类型），可不使用函数dict，而是使用字典方法copy，这将在本章后面介绍。</p><h3 id="4-2-2基本的字典操作"><a href="#4-2-2基本的字典操作" class="headerlink" title="4.2.2基本的字典操作"></a>4.2.2基本的字典操作</h3><p>字典的基本行为在很多方面都类似于序列：</p><ul><li>len(d)返回字典d包含的项（键-值对）数；</li><li>d[k]返回与键k相关联的值；</li><li>d[k] = v将值v关联到键k；</li><li>del d[k]删除键为k的项；</li><li>k in d检查字典d是否包含键为k的项。</li></ul><p>虽然字典和列表由多个相同指出，但也有一些重要的不同之处。</p><ul><li>键的类型：字典中的键可以是整数，但并非必须是整数。字典中的键可以是任何不可变的类型，如浮点数（实数）、字符串或元组。</li><li>自动添加：即便是字典中原本没有的键，也可以给它赋值，这将在字典中创建一个新项。然而，如果不使用append或其他类似的方法，就不能给列表中没有的元素赋值。</li><li>成员资格：表达式k in d（其中d是一个字典）查找的是键而不是值，而表达式v in l（其中l是一个列表）查找的是值而不是索引。</li></ul><p>提示：相比于检查列表是否包含指定的值，检查字典是否包含指定的键的效率更高。数据结构越大，效率差距就越大。</p><p>前述第一点（键可以是任何不可变的类型）是字典的主要优点。第二点也很重要，下面的示例说明了这种差别：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Foobar'</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#1>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    x<span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Foobar'</span>IndexError<span class="token punctuation">:</span> list assignment index out of range<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Foobar'</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">{</span><span class="token number">42</span><span class="token punctuation">:</span> <span class="token string">'Foobar'</span><span class="token punctuation">}</span></code></pre><p>首先，我们尝试将字符串’Foobar’赋给一个空列表中索引为42的元素。这显然不可信，因为没有这种元素。要让这种操作可行，初始化x时，必须使用[None] * 43之类的代码，而不能使用[]。然而，接下来对字典所做的尝试完全可行。</p><h3 id="4-2-3-将字符串格式设置功能用于字典"><a href="#4-2-3-将字符串格式设置功能用于字典" class="headerlink" title="4.2.3 将字符串格式设置功能用于字典"></a>4.2.3 将字符串格式设置功能用于字典</h3><p>第三章介绍过，可使用字符串格式设置功能来设置值的格式，这些值是作为命名或非命名参数提供给方法format。在有些情况下，通过在字典中储存一系列命名的值，可让格式设置更容易些。例如，可在字典中包含各种信息，这样只需要在格式字符串中提取所需的信息即可。为此，必须使用format_map来指出你将通过一个映射来提供所需的信息。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> phonebook <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Alice'</span><span class="token punctuation">:</span> <span class="token string">'2341'</span><span class="token punctuation">,</span> <span class="token string">'Beth'</span><span class="token punctuation">:</span> <span class="token string">'9102'</span><span class="token punctuation">,</span> <span class="token string">'Cecil'</span><span class="token punctuation">:</span> <span class="token string">'3258'</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Cecil's phone number is {Cecil}."</span><span class="token punctuation">.</span>format_map<span class="token punctuation">(</span>phonebook<span class="token punctuation">)</span><span class="token string">"Cecil's phone number is 3258."</span></code></pre><p>像这样使用字典时，可指定任意数量的转换说明符，条件是所有的字段名都是包含在字典中的键。在模板系统中，这种字符串格式设置方式很有用（下面的示例使用的是HTML(＠_＠;)? [不懂]）。</p><pre class=" language-html"><code class="language-html">>>> template = '''<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>{title}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{title}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{text}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>'''>>> data = {'title': 'My Home Page', 'text': 'Welcome to my home page!'}>>> print(template.format_map(data))<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>My Home Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>My Home Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Welcome to my home page!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="4-2-4-字典方法"><a href="#4-2-4-字典方法" class="headerlink" title="4.2.4 字典方法"></a>4.2.4 字典方法</h3><p>与其他内置类型一样，字典也有方法。字典的方法很有用，但其使用频率可能没有列表和字符串的方法那样高。可先学习，等需要使用特定方法时再回来探究原理。</p><h4 id="1-clear"><a href="#1-clear" class="headerlink" title="1. clear"></a>1. clear</h4><p>方法clear删除所有的字典项，这种操作是就地执行的（就像list.sort一样），因此什么都不返回（或者说返回None）。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Gumby'</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Gumby'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> returned_value <span class="token operator">=</span> d<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>returned_value<span class="token punctuation">)</span>None</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##这是很有用的，下面是第一个场景：</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> x<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'value'</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token string">'value'</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token string">'value'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">##下面是第二个场景：</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token string">'value'</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> x<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'value'</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token string">'value'</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>在这两个场景中，x和y最初都指向同一个字典。在第一个场景中，我们通过将一个空字典赋给x来“清空”它。这对y没有任何影响，它依然指向原来的字典。这种行为可能正是我们想要的，但要删除原来字典的所有元素，必须使用clear。如果这样做，y将是空的，如第二个场景所示。</p><h4 id="2-copy"><a href="#2-copy" class="headerlink" title="2. copy"></a>2. copy</h4><p>方法copy返回一个新字典，其包含的键-值对与原来的字典相同（这个方法执行的是浅复制，因为值本身是原件，而非副本）。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'machines'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'mlh'</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">[</span><span class="token string">'machines'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'mlh'</span><span class="token punctuation">,</span> <span class="token string">'machines'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'machines'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">##如我们所见，当替换副本中的值时，原件不受影响。然而，如果修改副本中的值（就地修改而不是替换），原件也将发生变换，因为原件指向的也是被修改的值。</span></code></pre><p>为避免这一问题，一种办法是执行深复制，即同时复制值及其包含的所有值，等等。为此，可以使用模块copy中的函数deepcopy。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> copy <span class="token keyword">import</span> deepcopy<span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">[</span><span class="token string">'names'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Alfred'</span><span class="token punctuation">,</span> <span class="token string">'Bertrand'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> d<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> dc <span class="token operator">=</span> deepcopy<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">[</span><span class="token string">'names'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Clive'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">{</span><span class="token string">'names'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alfred'</span><span class="token punctuation">,</span> <span class="token string">'Bertrand'</span><span class="token punctuation">,</span> <span class="token string">'Clive'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> dc<span class="token punctuation">{</span><span class="token string">'names'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alfred'</span><span class="token punctuation">,</span> <span class="token string">'Bertrand'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="3-fromkeys"><a href="#3-fromkeys" class="headerlink" title="3. fromkeys"></a>3. fromkeys</h4><p>方法fromkeys创建一个新字典，其中包含指定的键，且每个键对应的值都是None。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span></code></pre><p>这个示例首先创建了一个空字典，再对其调用方法fromkeys来创建另一个字典，这显得有点多余。我们可以不这样做，而是直接对dict（dict是所有字典所属的类型）调用方法fromkeys。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token comment" spellcheck="true">##如果不想使用默认值None，可提供特定值。</span><span class="token operator">>></span><span class="token operator">></span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'(unknow)'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'(unknow)'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token string">'(unknow)'</span><span class="token punctuation">}</span></code></pre><h4 id="4-get"><a href="#4-get" class="headerlink" title="4. get"></a>4. get</h4><p>方法get为访问字典项提供了宽松的环境。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##通常，如果我们试图访问字典中没有的项，将引发错误。如：</span><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#5>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>KeyError<span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token comment" spellcheck="true">##而使用get不会这样：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>None<span class="token comment" spellcheck="true">##如我们所见，使用get来访问不存在的键时，没有引发异常，而是返回None。我们可以指定“默认”值，这样将返回我们指定的值而不是None：</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'N/A'</span><span class="token punctuation">)</span><span class="token string">'N/A'</span><span class="token comment" spellcheck="true">##如果字典中包含指定的键，get的作用将与普通的字典查找相同：</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Eric'</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token string">'Eric'</span></code></pre><h4 id="5-items"><a href="#5-items" class="headerlink" title="5. items"></a>5. items</h4><p>方法items返回一个包含所有字典项的列表，其中每个元素都为（key,value）的形式。字典项在列表中的排列顺序不确定。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">'Python Web Site'</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">:</span> <span class="token string">'http://www.python.org'</span><span class="token punctuation">,</span> <span class="token string">'spam'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>dict_items<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'Python Web Site'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'http://www.python.org'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'spam'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回值属于一种名为字典视图的特殊类型。字典视图可用于迭代（第五章）。另外，还可确定其长度以及对其执行成员资格的审查：</span><span class="token operator">>></span><span class="token operator">></span> it <span class="token operator">=</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">'spam'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">in</span> it<span class="token boolean">True</span><span class="token comment" spellcheck="true">#视图的一个优点是不复制，它们始终是底层字典的反应，即使你修改了底层字典亦如此：</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">[</span><span class="token string">'spam'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">'spam'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">in</span> it<span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">[</span><span class="token string">'spam'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">'spam'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">in</span> it<span class="token boolean">True</span><span class="token comment" spellcheck="true">#然而，如果你要将字典项复制到列表中，可自己动手做：</span><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'Python Web Site'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'http://www.python.org'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'spam'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h4 id="6-keys"><a href="#6-keys" class="headerlink" title="6. keys"></a>6. keys</h4><p>方法keys返回一个字典视图，其中包含指定字典中的键。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">'Python Web Site'</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">:</span> <span class="token string">'http://www.python.org'</span><span class="token punctuation">,</span> <span class="token string">'spam'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>dict_keys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'spam'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="7-pop"><a href="#7-pop" class="headerlink" title="7. pop"></a>7. pop</h4><p>方法pop可用于获取与指定键相关联的值，并将该键-值从对应字典中删除。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">{</span><span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span></code></pre><h4 id="8-popitem"><a href="#8-popitem" class="headerlink" title="8. popitem"></a>8. popitem</h4><p>方法popitem类似于list.pop，但list.pop弹出列表中的最后一个元素，而popitem随机地弹出一个字典项，因为字典项的顺序是不确定的，没有“最后一个元素”的概念。如果我们要以高效的方式逐个删除并处理所有的字典项，这可能很有用，因为这样无需先获取键列表。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">'Python Web Site'</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">:</span> <span class="token string">'http://www.python.org'</span><span class="token punctuation">,</span> <span class="token string">'spam'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'spam'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">{</span><span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">'Python Web Site'</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">:</span> <span class="token string">'http://www.python.org'</span><span class="token punctuation">}</span></code></pre><p>虽然popitem类似于列表方法pop，但字典没有与append（它在列表末尾添加一个元素）对应的方法。这是因为字典是无序的，类似的方法毫无意义。</p><p>注：如果希望方法popitem以可预测的顺序弹出字典项，情参阅模块collections中的OrderedDict类。</p><h4 id="9-setdefault"><a href="#9-setdefault" class="headerlink" title="9. setdefault"></a>9. setdefault</h4><p>方法setdefault优点像get，因为它也获取与指定键相关联的值，但除此之外，setdefault还在字典不包含指定的键时，在字典中添加指定的键-值对。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'N/A'</span><span class="token punctuation">)</span><span class="token string">'N/A'</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'N/A'</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Gumby'</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'N/A'</span><span class="token punctuation">)</span><span class="token string">'Gumby'</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Gumby'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#如我们所见，指定的键不存在时，setdefault返回指定的值并相应地更新字典。如果指定的键存在，就返回其值，并保持字典不变。与get一样，值是可选的；如果没有指定，默认为None。</span><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>None<span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span></code></pre><p>提示：如果希望有用于整个字典的全局默认值，请参阅模块collections中的defaultdict类。</p><h4 id="10-update"><a href="#10-update" class="headerlink" title="10. update"></a>10. update</h4><p>方法update使用一个字典中的项来更新另一个字典。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">'Python Web Site'</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">:</span> <span class="token string">'http://www.python.org'</span><span class="token punctuation">,</span> <span class="token string">'changed'</span><span class="token punctuation">:</span> <span class="token string">'Mar 14 22:09:15 MET 2016'</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">'Python Language Website'</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>update<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">{</span><span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">'Python Language Website'</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">:</span> <span class="token string">'http://www.python.org'</span><span class="token punctuation">,</span> <span class="token string">'changed'</span><span class="token punctuation">:</span> <span class="token string">'Mar 14 22:09:15 MET 2016'</span><span class="token punctuation">}</span></code></pre><p>对于通过参数提供的字典，将其添加到当前字典中。如果当前字典包含键相同的项，就替换它。</p><p>可像调用本章前面讨论的函数dict（类型构造函数）那样调用方法update。这意味着调用update时，可向它提供一个映射、一个由键-值对组成的序列（或其他可迭代对象）或关键字参数。</p><h4 id="11-values"><a href="#11-values" class="headerlink" title="11. values"></a>11. values</h4><p>方法values返回一个由字典中的值组成的字典视图。不同于方法keys，方法values返回的视图可能包含重复的值。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>dict_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>dict_keys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="4-3-小结"><a href="#4-3-小结" class="headerlink" title="4.3 小结"></a>4.3 小结</h2><p>本章介绍了如下内容：</p><ul><li>映射：映射让你能够使用任何不可变的对象（最常用的是字符串和元组）来标识其元素。Python只有一种内置的映射类型，那就是字典。</li><li>将字符串格式设置功能用于字典：要对字典执行字符串格式的设置操作，不能使用format和命名参数，而必须使用format_map。</li><li>字典方法：字典有很多方法，这些方法的调用方式与列表和字符串的方法相同。</li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a><a href="https://github.com/ChenaniahLv/Python-Learning/tree/master/4Ch" target="_blank" rel="noopener">练习</a></h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 教程 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习第3章-使用字符串</title>
      <link href="/2019/02/13/python-xue-xi-di-3-zhang-shi-yong-zi-fu-chuan/"/>
      <url>/2019/02/13/python-xue-xi-di-3-zhang-shi-yong-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-使用字符串"><a href="#第三章-使用字符串" class="headerlink" title="第三章-使用字符串"></a>第三章-使用字符串</h1><p>本章将介绍如何使用字符串来设置其他值的格式（比如便于打印），并大致了解字符串方法可完成的重要任务，如拆分、合并和查找等。</p><h2 id="3-1-字符串基本操作"><a href="#3-1-字符串基本操作" class="headerlink" title="3.1 字符串基本操作"></a>3.1 字符串基本操作</h2><p>所有标准序列操作（索引、切片、乘法、成员资格审查、长度、最小值、最大值）都适用于字符串，但别忘了字符串是不可变的，因此所有的元素赋值和切片赋值都是非法的。</p><h2 id="3-2-设置字符串的格式：精简版"><a href="#3-2-设置字符串的格式：精简版" class="headerlink" title="3.2 设置字符串的格式：精简版"></a>3.2 设置字符串的格式：精简版</h2><p>Python新手可能不会用到所有的Python字符串格式设置选项，因此这里先介绍精简版。如果想了解详情，可参阅3.3。</p><p>Python提供了多种字符串格式设置方法：</p><ol><li><p>使用字符串格式设置运算符——百分号（类似于C语言）：在%左边指定一个字符串（格式字符串），并在右边指定要设置其格式的值。指定其格式的值时，可使用单个值（如字符串或数字），可使用元组（如果要设置多个值的格式），还可以使用字典（第四章），其中最常见的是元组。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token string">"Hello, %s. %s enough for ya?"</span><span class="token operator">>></span><span class="token operator">></span> values <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token string">'Hot'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">%</span> values<span class="token string">'Hello, world. Hot enough for ya?'</span><span class="token comment" spellcheck="true">##上述格式字符串%s称为转换说明符，指出了将值插入什么地方。s意味着将其转换为字符串。其他说明符号将导致其他形式的转换。例如，%.3f将值的格式设置为包含3位小数的浮点数。</span></code></pre></li><li><p>使用所谓的模板字符串，类似于UNIX shell的语法，旨在简化基本的格式设置机制。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> string <span class="token keyword">import</span> Template<span class="token operator">>></span><span class="token operator">></span> tmpl <span class="token operator">=</span> Template<span class="token punctuation">(</span><span class="token string">"Hello, $who! $what enough for ya?"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> tmpl<span class="token punctuation">.</span>substitute<span class="token punctuation">(</span>who<span class="token operator">=</span><span class="token string">"Mars"</span><span class="token punctuation">,</span> what<span class="token operator">=</span><span class="token string">"Dusty"</span><span class="token punctuation">)</span><span class="token string">'Hello, Mars! Dusty enough for ya?'</span><span class="token comment" spellcheck="true">##包含等号的参数称为关键字参数（第六章）。在字符串格式设置中，可将关键字参数视为一种向命名替换字段提供值的方式</span></code></pre></li><li><p>编写新代码时，应选择字符串方法format，它融合并强化了早期方法的优点。使用这种方法时，每个替换字符都用花括号括起，其中可能包含名称，还可能包含有关如何对相应的值进行转换和格式设置的信息。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##在最简单的情况下，替换字段没有名称或将索引用作名称。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{}, {} and {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span> <span class="token string">"second"</span><span class="token punctuation">,</span> <span class="token string">"third"</span><span class="token punctuation">)</span><span class="token string">'first, second and third'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{0}, {1} and {2}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span> <span class="token string">"second"</span><span class="token punctuation">,</span> <span class="token string">"third"</span><span class="token punctuation">)</span><span class="token string">'first, second and third'</span><span class="token comment" spellcheck="true">##然而，索引无需像上面这样按顺序排列。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{3} {0} {2} {1} {3} {0}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"be"</span><span class="token punctuation">,</span> <span class="token string">"not"</span><span class="token punctuation">,</span> <span class="token string">"or"</span><span class="token punctuation">,</span> <span class="token string">"to"</span><span class="token punctuation">)</span><span class="token string">'to be or not to be'</span><span class="token comment" spellcheck="true">##命名字段的工作原理与你预期的完全相同。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{name} is approximately {value:.2f}."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>value<span class="token operator">=</span>pi<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"π"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##使用了格式说明符.2f，指的是包含两位小数的浮点数格式。</span><span class="token string">'π is approximately 3.14.'</span><span class="token comment" spellcheck="true">##最后，在Python中，如果变量与替换字符段同名，还可以使用一种简写，在这种情况下，可使用f字符串——在字符串前面加上f。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> math <span class="token keyword">import</span> e<span class="token operator">>></span><span class="token operator">></span> f<span class="token string">"Euler's constant is roughly {e}."</span><span class="token string">"Euler's constant is roughly 2.718281828459045."</span><span class="token comment" spellcheck="true">#在这里，创建最终的字符串时，将把替换字段e替换为变量e的值，与下面这个更加明确的表达式等价：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Euler's constant is roughly {e}."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>e<span class="token operator">=</span>e<span class="token punctuation">)</span><span class="token string">"Euler's constant is roughly 2.718281828459045."</span></code></pre></li></ol><h2 id="3-3-设置字符串的格式：完整版"><a href="#3-3-设置字符串的格式：完整版" class="headerlink" title="3.3 设置字符串的格式：完整版"></a>3.3 设置字符串的格式：完整版</h2><p>这里的基本思想是对字符串调用方法format，并提供要设置其格式的值。字符串包含有关如何设置格式的信息，而这些信息是使用一种微型格式指定语言（mini-language）指定的。每个值都被插入字符串中，以替换用花括号括起的替换字段。要在最终结果中包括花括号，可在格式字符串中使用两个花括号（即）来指定。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{{包含花括号的示例}}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'{包含花括号的示例}'</span></code></pre><p>在格式字符串中，最激动人心的部分为替换字段。替换字段由如下部分组成，其中每个部分都是可选的。</p><ul><li>字段名：索引或标识符，指出要设置哪个值的格式并使用结果来替换该字段。除指定值外，还可指定值的特定部分，如列表的元素。</li><li>转换标志：跟在叹号后面的单个字符。当前支持的字符包括r（表示repr）、s（表示str）和a（表示ascii）。如果你指定了转换标志，将不使用对象本身的格式设置机制，而是使用指定的函数将对象转换为字符串，再做进一步的格式设置。</li><li>格式说明符：跟在冒号后面的表达式（这种表达式是使用微型格式指定语言表示的）。格式说明符让我们能够详细地指定最终的格式，包括格式类型（如字符串、浮点数或十六进制数），字段宽度和数的精度，如何显示符号和千位分隔符，以及各种对其和填充方式。</li></ul><h3 id="3-3-1-替换字段名"><a href="#3-3-1-替换字段名" class="headerlink" title="3.3.1 替换字段名"></a>3.3.1 替换字段名</h3><p>在最简单的情况下，只需向format提供要设置其格式的未命名参数，并在格式字符串中使用未命名字段。此时，将按顺序将字段和参数配对。你还可以给参数指定名称，这种参数将被用于相应的替换字段中。并且可以混合使用这两种方法。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{foo} {} {bar} {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> bar<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> foo<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token string">'3 1 4 2'</span><span class="token comment" spellcheck="true">##还可通过索引来指定要在哪个字段中使用相应的未命名参数，这样可不按顺序使用未命名参数：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{foo} {1} {bar} {0}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> bar<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> foo<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token string">'3 2 4 1'</span><span class="token comment" spellcheck="true">##然而，不能同时使用手工编号和自动编号，因为这样很快就会变得混乱不堪。</span></code></pre><p>并非只能使用提供的值本身，而是可以访问其组成部分（就像在常规Python代码中一样）。如下所示：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> math<span class="token operator">>></span><span class="token operator">></span> tmpl <span class="token operator">=</span> <span class="token string">"The {mod.__name__} module defines the value {mod.pi} for π"</span><span class="token comment" spellcheck="true">##name两端为各两个下划线</span><span class="token operator">>></span><span class="token operator">></span> tmpl<span class="token punctuation">.</span>format<span class="token punctuation">(</span>mod<span class="token operator">=</span>math<span class="token punctuation">)</span><span class="token string">'The math module defines the value 3.141592653589793 for π'</span><span class="token comment" spellcheck="true">##如你所见，可使用索引，还可以使用句点表示法来访问导入模块中的方法、属性、变量和函数（看起来很怪异的变量__name__包含指定模块中的名称）。</span></code></pre><h3 id="3-3-2-基本转换"><a href="#3-3-2-基本转换" class="headerlink" title="3.3.2 基本转换"></a>3.3.2 基本转换</h3><p>指定要在字段中包含的值后，就可以添加有关如何设置其格式的指令了。</p><ul><li>首先可以提供一个转换标志。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{pi!s} {pi!r} {pi!a}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>pi<span class="token operator">=</span><span class="token string">"π"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>π <span class="token string">'π'</span> <span class="token string">'\u03c0'</span><span class="token comment" spellcheck="true">##上述三个标志（s、r和a）指定分别使用str、repr和ascii进行转换。函数str通常创建外观普通的字符串版本（这里没有对输入的字符串做任何处理）。函数repr尝试创建给定值的Python表示（这里是一个字符串字面量）。函数ascii创建只包含ASCII字符的表示。</span></code></pre></li><li>还可以指定要转换的值是那种类型，更准确地说，是要将其视为哪种类型（冒号后面使用类型说明符）。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"The number is {num}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token string">'The number is 42'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"The number is {num:f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##提供一个整数的，但将其作为小数进行处理</span><span class="token string">'The number is 42.000000'</span><span class="token comment" spellcheck="true">##也可以将其作为二进制来处理</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"The number is {num:b}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token string">'The number is 101010'</span></code></pre></li><li>完整的类型说明符清单：</li></ul><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">b</td><td style="text-align:left">将整数表示为二进制数</td></tr><tr><td style="text-align:center">c</td><td style="text-align:left">将整数解读为Unicode码点</td></tr><tr><td style="text-align:center">d</td><td style="text-align:left">将整数视为十进制数进行处理，这是整数默认使用的说明符</td></tr><tr><td style="text-align:center">e</td><td style="text-align:left">使用科学计数法来表示小数（用e来表示指数）</td></tr><tr><td style="text-align:center">E</td><td style="text-align:left">与e相同，但用E来表示指数</td></tr><tr><td style="text-align:center">f</td><td style="text-align:left">将小数表示为定点数</td></tr><tr><td style="text-align:center">F</td><td style="text-align:left">与f相同，但对于特殊值（nan和inf），使用大写表示</td></tr><tr><td style="text-align:center">g</td><td style="text-align:left">自动在定点表示法和科学计数法之间作出选择。这是默认用于小数的说明符，但在默认情况下至少有1位小数</td></tr><tr><td style="text-align:center">G</td><td style="text-align:left">与g相同，但使用大写来表示指数和特殊值</td></tr><tr><td style="text-align:center">n</td><td style="text-align:left">与g相同，但插入随区域而异的数字分隔符</td></tr><tr><td style="text-align:center">o</td><td style="text-align:left">将整数表示为八进制数</td></tr><tr><td style="text-align:center">s</td><td style="text-align:left">保持字符串的格式不变，这是默认用于字符串的说明符</td></tr><tr><td style="text-align:center">x</td><td style="text-align:left">将整数表示为十六进制数并使用小写字母</td></tr><tr><td style="text-align:center">X</td><td style="text-align:left">与x相同，但使用大写字母</td></tr><tr><td style="text-align:center">%</td><td style="text-align:left">将数表示为百分比值（乘以100，按说明符f设置格式，再在后面加上%）</td></tr></tbody></table><h3 id="3-3-3-宽度、精度和千位分隔符"><a href="#3-3-3-宽度、精度和千位分隔符" class="headerlink" title="3.3.3 宽度、精度和千位分隔符"></a>3.3.3 宽度、精度和千位分隔符</h3><p>设置浮点数（或其他更具体的小数类型）的格式时，默认在小数点后面显示6位小数，并根据需要设置字段的宽度，而不进行任何形式的填充。当然，这种默认设置可能不是我们想要的，在这种情况下，可根据需要在格式说明中指定宽度和精度。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##宽度是使用整数指定的，如下所示：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{num:10}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token string">'         3'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{name:10}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token string">'Bob       '</span><span class="token comment" spellcheck="true">#如我们所见，数和字符串的对其方式不同，对其在下节介绍。</span><span class="token comment" spellcheck="true">##精度也是使用整数指定的，但需要在它前面加上一个表示小数点的句点：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> math<span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Pi day is {pi:.2f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>pi<span class="token operator">=</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token string">'Pi day is 3.14'</span><span class="token comment" spellcheck="true">##可同时指定宽度和精度：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> math<span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{pi:10.2f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>pi<span class="token operator">=</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token string">'      3.14'</span><span class="token comment" spellcheck="true">##对于其他类型也可以指定精度（不常见）：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{:.5}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"Guido van Rossum"</span><span class="token punctuation">)</span><span class="token string">'Guido'</span><span class="token comment" spellcheck="true">##最后，可以使用逗号来指出要添加的千位分隔符：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'One googol is {:,}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token string">'One googol is 10,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000'</span><span class="token comment" spellcheck="true">##同时指定其他格式设置元素时，这个逗号应放在宽度和表示精度的句点之间。</span></code></pre><h3 id="3-3-4-符号、对齐和用0填充"><a href="#3-3-4-符号、对齐和用0填充" class="headerlink" title="3.3.4 符号、对齐和用0填充"></a>3.3.4 符号、对齐和用0填充</h3><p>有很多用于设置数字格式的机制，便于打印整齐的表格。在大多数情况下，只需指定宽度和精度，但包含负数后，原本漂亮的输出可能不再漂亮。另外，正如你所看到的，字符串和数的默认对其方式不同。在一栏中同时包含字符串和数时，就会去修改默认的对其方式。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##在指定宽度和精度的数前面，可添加一个标志，这各标志可以是零、加号、减号或空格，其中零表示用0来填充数字。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> math<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'{:010.2f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token string">'0000003.14'</span><span class="token comment" spellcheck="true">##要指定左对齐、右对齐和居中，可分别使用&lt;、>和^。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:&lt;10.2f}\n{0:^10.2f}\n{0:>10.2f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3.14</span>         <span class="token number">3.14</span>         <span class="token number">3.14</span><span class="token comment" spellcheck="true">##可以使用填充字符来扩充对齐说明符，这样将使用指定的字符而不是默认的空格来填充。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{:$^15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">" WIN BIG "</span><span class="token punctuation">)</span><span class="token string">'$$$ WIN BIG $$$'</span><span class="token comment" spellcheck="true">##还有更具体的说明符=，它指定将填充字符放在符号和数字之间。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:10.2f}\n{1:10.2f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token operator">-</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token number">3.14</span>     <span class="token operator">-</span><span class="token number">3.14</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:10.2f}\n{1:=10.2f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token operator">-</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token number">3.14</span><span class="token operator">-</span>     <span class="token number">3.14</span><span class="token comment" spellcheck="true">##如果要给正数加上符号，可使用说明符+（将其放在对齐说明符后面）而不是默认的-。如果将符号说明符指定为空格，会在整数前面加上空格而不是+。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:-.2f}\n{1:-.2f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token operator">-</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3.14</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:+.2f}\n{1:+.2f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token operator">-</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3.14</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0: .2f}\n{1: .2f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token operator">-</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">3.14</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token comment" spellcheck="true">##最后一个要素是井号(#)选项，可以将其放在符号说明符和宽度之间（如果指定了这两种设置）。这个选项将初伏另一种转换方式，转换细节随类型而异。例如，对于二进制、八进制和十六进制转换，将加上一个前缀。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{:b}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token string">'101010'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{:#b}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token string">'0b101010'</span><span class="token comment" spellcheck="true">###对于各种十进制数，它要求必须包含小数点（对于类型g，它保留小数点后面的零）。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{:g}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token string">'42'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"{:#g}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token string">'42.0000'</span></code></pre><h2 id="3-4-字符串方法"><a href="#3-4-字符串方法" class="headerlink" title="3.4 字符串方法"></a>3.4 字符串方法</h2><p>前面介绍了列表的方法，而字符串的方法要多得多，这里只介绍一些最有用的。</p><h3 id="3-4-1-center"><a href="#3-4-1-center" class="headerlink" title="3.4.1 center"></a>3.4.1 center</h3><p>方法center通过在两边添加填充字符（默认为空格）让字符串居中。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"The Middle by Jimmy Eat World"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token string">'     The Middle by Jimmy Eat World     '</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"The Middle by Jimmy Eat World"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token string">'*****The Middle by Jimmy Eat World*****'</span></code></pre><p>另请参见：ljust、rjust和zfill</p><h3 id="3-4-2-find"><a href="#3-4-2-find" class="headerlink" title="3.4.2 find"></a>3.4.2 find</h3><p>方法find在字符串中查找子串。如果找到，就返回子串第一个字符的索引，否则返回-1。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> title <span class="token operator">=</span> <span class="token string">"Monty Python's Flying Circus"</span><span class="token operator">>></span><span class="token operator">></span> title<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Monty'</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> title<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> title<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"Flying"</span><span class="token punctuation">)</span><span class="token number">15</span><span class="token operator">>></span><span class="token operator">></span> title<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Zirquss'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token comment" spellcheck="true">##注：字符串方法find返回的并非布尔值。如果find像这样返回0，就意味着它在索引0处找到了指定的子串。</span><span class="token comment" spellcheck="true">#还可以指定搜索的起点和终点（可选的）</span><span class="token operator">>></span><span class="token operator">></span> subject <span class="token operator">=</span> <span class="token string">'$$$ Get rich now!!! $$$'</span><span class="token operator">>></span><span class="token operator">></span> subject<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'$$$'</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> subject<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'$$$'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##只指定了起点</span><span class="token number">20</span><span class="token operator">>></span><span class="token operator">></span> subject<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'!!!'</span><span class="token punctuation">)</span><span class="token number">16</span><span class="token operator">>></span><span class="token operator">></span> subject<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'!!!'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##同时指定了起点和终点</span><span class="token operator">-</span><span class="token number">1</span><span class="token comment" spellcheck="true">##注：起点和终点值指定你的搜索范围包含起点，但不包含终点。这是Python惯常的做法。</span></code></pre><p>另请参见：rfind、index、rindex、count、startswith、endswith</p><h3 id="3-4-3-join"><a href="#3-4-3-join" class="headerlink" title="3.4.3 join"></a>3.4.3 join</h3><p>join是一种非常重要的字符串方法，其作用与split相反，用于合并序列的元素。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> sep <span class="token operator">=</span> <span class="token string">'+'</span><span class="token operator">>></span><span class="token operator">></span> sep<span class="token punctuation">.</span>join<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##尝试合并一个数字列表</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#2>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    sep<span class="token punctuation">.</span>join<span class="token punctuation">(</span>seq<span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> sequence item <span class="token number">0</span><span class="token punctuation">:</span> expected str instance<span class="token punctuation">,</span> int found<span class="token operator">>></span><span class="token operator">></span> seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> sep<span class="token punctuation">.</span>join<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##合并一个字符串列表</span><span class="token string">'1+2+3+4+5'</span><span class="token operator">>></span><span class="token operator">></span> dirs <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'usr'</span><span class="token punctuation">,</span> <span class="token string">'bin'</span><span class="token punctuation">,</span> <span class="token string">'env'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'/'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dirs<span class="token punctuation">)</span><span class="token string">'/usr/bin/env'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C:'</span> <span class="token operator">+</span> <span class="token string">'\\'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dirs<span class="token punctuation">)</span><span class="token punctuation">)</span>C<span class="token punctuation">:</span>\usr\bin\env<span class="token comment" spellcheck="true">##如我们所见，所合并的序列的元素必须都是字符串。注意到在最后两个示例中，我们使用了一系列目录，并按照UNIX和DOS/Windows的约定设置其格式：通过使用不同的分隔符（并在DOS版本中添加了盘符）。</span></code></pre><p>另请参见：split</p><h3 id="3-4-4-lower"><a href="#3-4-4-lower" class="headerlink" title="3.4.4 lower"></a>3.4.4 lower</h3><p>方法lower返回字符串的小写版本。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Trondheim Hammer Dance'</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'trondheim hammer dance'</span></code></pre><p>在编写代码时，如果不想区分字符串的大小写（即忽略大小写的差别），这将很有用。例如，假设你要检查列表中是否包含指定的用户名。</p><p>一个与lower相关的方法是title。它将字符串转换为词首大写，即所有单词的首字母都大写，其他字母都小写。然而，它确定单词边界的方式可能导致结果不合理。</p><p>另请参见：islower、istitle、isupper、translate</p><p>附录：capitalize、casefold、swapcase、title、upper</p><h3 id="3-4-5-replace"><a href="#3-4-5-replace" class="headerlink" title="3.4.5 replace"></a>3.4.5 replace</h3><p>方法replace将指定的子串替换为另一字符串，并返回替换后的结果。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'This is a test'</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'eez'</span><span class="token punctuation">)</span><span class="token string">'Theez eez a test'</span><span class="token comment" spellcheck="true">##如果使用过字处理程序的“查找并替换”功能，一定指导这个方法很有用。</span></code></pre><p>另请参见：translate、expandtabs</p><h3 id="3-4-6-split"><a href="#3-4-6-split" class="headerlink" title="3.4.6 split"></a>3.4.6 split</h3><p>split是一个非常重要的字符串方法，其作用与join相反，用于将字符串拆分为序列。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'1+2+3+4+5'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'/usr/bin/env'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'usr'</span><span class="token punctuation">,</span> <span class="token string">'bin'</span><span class="token punctuation">,</span> <span class="token string">'env'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Using the default'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'Using'</span><span class="token punctuation">,</span> <span class="token string">'the'</span><span class="token punctuation">,</span> <span class="token string">'default'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##注：如果没有指定分隔符，将默认在单个或多个连续的空白字符（空格、制表符、换行符等）处进行拆分。</span></code></pre><p>另请参见：join</p><p>附录：partition、rpartition、rsplit、splitlines</p><h3 id="3-4-7-strip"><a href="#3-4-7-strip" class="headerlink" title="3.4.7 strip"></a>3.4.7 strip</h3><p>方法strip将字符串开头和末尾的空白（但不包括中间的空白）删除，并返回删除后的结果。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'   internal whitespace is kept   '</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'internal whitespace is kept'</span><span class="token comment" spellcheck="true">##还可以在一个字符串参数中指定要删除哪些字符：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'*** SPAM * for * everyone!!! ***'</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">' *!'</span><span class="token punctuation">)</span><span class="token string">'SPAM * for * everyone'</span><span class="token comment" spellcheck="true">##这个方法只删除开头或末尾的指定字符，因此中间的星号未被删除。</span></code></pre><p>另请参见：lstrip、rstrip</p><h3 id="3-4-8-translate"><a href="#3-4-8-translate" class="headerlink" title="3.4.8 translate"></a>3.4.8 translate</h3><p>方法translate与replace一样替换字符串的特定部分，但不同的是它只能进行单字符串替换。这个方法的优势在于能够同时替换多个字符，因此效率比replace高。</p><p>这个方法用途很多（如替换换行符或其他随平台而异的特殊字符），但这里只介绍一个比较简单的示例。假设要将一段英语文本转换为带有德国口音的版本，为此必须将字符c和s分别替换为k和z。</p><p>然而，使用translate前必须创建一个转换表。这个转换表指出了不同Unicode码点之间的转换关系。要创建转换表，可对于字符串类型str调用方法maketrans，这个方法接受两个参数：两个字符相同的字符串，它们指定要将第一字符中的每个字符都替换为第二个字符串中的相应字符。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> table <span class="token operator">=</span> str<span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span><span class="token string">'cs'</span><span class="token punctuation">,</span> <span class="token string">'kz'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> table<span class="token comment" spellcheck="true">##如果愿意，可以查看转换表中的内容，但我们看到的只是Unicode码点之间的映射。</span><span class="token punctuation">{</span><span class="token number">99</span><span class="token punctuation">:</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">:</span> <span class="token number">122</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'this is an incredible test'</span><span class="token punctuation">.</span>translate<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##创建转换表后，就可以将其用做方法translate的参数。</span><span class="token string">'thiz iz an inkredible tezt'</span><span class="token operator">>></span><span class="token operator">></span> table <span class="token operator">=</span> str<span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span><span class="token string">'cs'</span><span class="token punctuation">,</span> <span class="token string">'kz'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##调用方法maketrans时，还可以提供可选的第三个参数，指定要将哪些字母删除。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'this is an incredible test'</span><span class="token punctuation">.</span>translate<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token string">'thizizaninkredibletezt'</span></code></pre><p>另请参见：replace、lower</p><h3 id="3-4-9-判断字符串是否满足特定的条件"><a href="#3-4-9-判断字符串是否满足特定的条件" class="headerlink" title="3.4.9 判断字符串是否满足特定的条件"></a>3.4.9 判断字符串是否满足特定的条件</h3><p>很多字符串方法都以is打头，如isspace、isdigit和isupper，它们判断字符串是否具有特定的性质（如包含的字符全为空白、数字或大写）。如果字符串具备特定的性质，这些方法就返回Ture，否则就返回False。</p><p>另请参见：isalnum、isalpha、isdecimal、isdigit、isidentifier、islower、isnumeric、isprintable、isspace、istitle、isupper</p><h2 id="3-5-小结"><a href="#3-5-小结" class="headerlink" title="3.5 小结"></a>3.5 小结</h2><p>本章介绍了字符串的两个重要方面：</p><ul><li>字符串格式设置：求模运算符（%）可用于将值合并为包含转换标志（如%s）的字符串，这让你能够以众多方式设置值的格式，如左对齐或右对齐，指定字段宽度和精度，添加符号（正好或符号）以及在左边填充0等。</li><li>字符串方法：字符串有很多方法，有些很有用（如split和join），有些很少用到（如istitle和capitalize）。</li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a><a href="https://github.com/ChenaniahLv/Python-Learning/tree/master/3Ch" target="_blank" rel="noopener">练习</a></h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 教程 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习第2章-列表和元组</title>
      <link href="/2019/02/13/python-xue-xi-di-2-zhang-lie-biao-he-yuan-zu/"/>
      <url>/2019/02/13/python-xue-xi-di-2-zhang-lie-biao-he-yuan-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-列表和元组"><a href="#第二章-列表和元组" class="headerlink" title="第二章-列表和元组"></a>第二章-列表和元组</h1><ul><li>数据结构是以某种方式（如通过编号）组合起来的数据元素（如数、字符乃至其他数据结构）的集合。</li><li>Python中，最基本的数据结构为序列（sequence）。</li><li>序列中每个元素都有编号，即其位置或索引，其中第一个元素的索引为0，第二个元素的索引为1，依此类推。这显得更加自然，同时可以回绕到序列末尾，用负索引表示序列末尾元素的位置。</li><li>元素是一种特殊的序列，类似与列表，但是不能修改。</li></ul><h2 id="2-1-序列概述"><a href="#2-1-序列概述" class="headerlink" title="2.1 序列概述"></a>2.1 序列概述</h2><ul><li>Python内置了多种序列，最常用的两种有列表和元组，另一种重要的序列是字符串（下章）。</li><li>列表和元组的主要不同在于，列表是可以修改的，而元组不可以。这意味着适用于需要中途添加元素的情形，而元组适用于出于某种考虑需要禁止修改序列的情形。</li><li>几乎在所有情况下都可以使用列表来代替元组，但一个例外情况是将元组用作字典键，因为字典键是不允许修改的。</li><li>在处理一系列值时（数据库），序列很有用。例如：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> edward <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Edward Gumby'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##如果用列表来表示，所有元素都放在方括号内，并用逗号隔开。</span><span class="token operator">>></span><span class="token operator">></span> john <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'John Smith'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> database <span class="token operator">=</span> <span class="token punctuation">[</span>edward<span class="token punctuation">,</span> john<span class="token punctuation">]</span><span class="token comment" spellcheck="true">##序列中还可包含其他序列。</span><span class="token operator">>></span><span class="token operator">></span> database<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Edward Gumby'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'John Smith'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre></li><li>Python支持一种数据结构的基本概念，名为容器（container）。</li><li>容器基本上就是可以包含其他对象的对象。两种主要的容器是序列（如列表和元组）和映射（如字典）。</li><li>在序列中，每个元素都有编号，而在映射中，每个元素都有名称（也叫键）。（映射-第四章）</li><li>有一种既不是序列也不是映射的容器，叫做集合。（第10章）</li></ul><h2 id="2-2-通用的序列操作"><a href="#2-2-通用的序列操作" class="headerlink" title="2.2 通用的序列操作"></a>2.2 通用的序列操作</h2><ul><li>有几种操作适用于所有的序列，包括索引、切片、相加、相乘和成员资格检查。另外，Python中还提供了一些内置函数，可用于确定序列的长度以及找出序列中最大和最小的元素。</li><li>另外还有一个重要操作叫做迭代（iteration），对序列进行迭代意味着对其每个元素都执行特定的操作。（第五章）</li></ul><h3 id="2-2-1-索引"><a href="#2-2-1-索引" class="headerlink" title="2.2.1 索引"></a>2.2.1 索引</h3><p>序列中所有元素都有编号——从0开始递增，可以使用编号来访问各个元素，这称作索引（indexing）。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> greeting <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token operator">>></span><span class="token operator">></span> greeting<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##可以使用索引来获取元素。这种索引方式适用于所有序列。</span><span class="token string">'H'</span><span class="token operator">>></span><span class="token operator">></span> greeting<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##当使用负数进行索引时，Python将从最后一个元素开始往左数，因此-1是最后一个元素的位置。</span><span class="token string">'o'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Hello'</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##对于字符串或其他序列字面量，可直接对其进行索引操作，无需将其赋给变量。</span><span class="token string">'e'</span><span class="token operator">>></span><span class="token operator">></span> fourth <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'Year: '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##如果函数调用返回一个序列，可直接对其进行索引操作。</span>Year<span class="token punctuation">:</span> <span class="token number">2005</span><span class="token operator">>></span><span class="token operator">></span> fourth<span class="token string">'5'</span></code></pre><h3 id="2-2-2-切片"><a href="#2-2-2-切片" class="headerlink" title="2.2.2 切片"></a>2.2.2 切片</h3><p>除了使用索引来访问单个元素外，还可以使用切片来访问特定范围内的元素。为此，可以使用两个索引，并且用冒号分隔：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##第一个索引是包含的第一个元素的编号，但第二个索引是切片后余下的第一个元素的编号。简而言之，我们用两个索引来指定切片的边界，其中第一个索引指定的元素包含在切片内，但第二个索引指定的元素不包含在切片内。</span><span class="token operator">>></span><span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><h4 id="1-绝妙的简写"><a href="#1-绝妙的简写" class="headerlink" title="1.绝妙的简写"></a>1.绝妙的简写</h4><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##索引10指的是第11个元素：它并不存在，但确实是到达最后一个元素后再前进一步所处的位置。</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##如果要从列表末尾开始数，可使用负数索引。</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##在执行切片操作时，如果第一个索引指定的元素位于第二个索引指定的元素后面，结果就为空序列。</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##如果切片结束于序列末尾，可省略第二个索引。</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##如果切片始于序列开头，可省略第一个索引。</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##如果要复制整个序列，可将两个索引都省略。</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span></code></pre><h4 id="2-更大的步长"><a href="#2-更大的步长" class="headerlink" title="2.更大的步长"></a>2.更大的步长</h4><p>执行切片操作时，我们显式或隐式地指定起点和终点，但通常省略另一个参数，即步长。在普通切片中，步长为1。这意味着从一个元素移到下一个元素，因此切片包含起点和终点之间的所有元素。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##步长为1</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##步长为2</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##步长为3</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##在使用步长操作时，仍可以使用简写</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##步长为负数时，从右向左提取元素</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##步长为负数，同样可以使用简写</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##步长为负数时，要求第一个索引大于第二个索引，否则会返回空序列</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##步长为正数时，它从起点移到终点，而步长为负数时，它从终点移到起点。</span></code></pre><h3 id="2-2-3-序列相加"><a href="#2-2-3-序列相加" class="headerlink" title="2.2.3 序列相加"></a>2.2.3 序列相加</h3><p>可以使用加法运算符来拼接序列，但是不能拼接列表和字符串，虽然它们都是序列。一般来说，不能拼接不同类型的序列。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> <span class="token string">'world!'</span><span class="token string">'Hello, world!'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'world!'</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#14>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'world!'</span>TypeError<span class="token punctuation">:</span> can only concatenate list <span class="token punctuation">(</span><span class="token operator">not</span> <span class="token string">"str"</span><span class="token punctuation">)</span> to list</code></pre><h3 id="2-2-4-乘法"><a href="#2-2-4-乘法" class="headerlink" title="2.2.4 乘法"></a>2.2.4 乘法</h3><p>将序列与数x相乘时，将重复这个序列x次来创建一个新序列：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'python'</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token string">'pythonpythonpythonpythonpython'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span></code></pre><p><strong>None、空列表和初始化</strong></p><ul><li>空列表是使用不包含任何内容的两个方括号（[]）表示的。</li><li>如果要创建一个包含10个元素的列表，但列表中没有有用的内容，可以使用[0]*10。</li><li>有些情况下，可能想要使用表示“什么都没有”的值，如表示还没有在列表中添加任何内容，可使用None。</li><li>在Python中，None表示什么都没有，因此，要将列表的长度初始化为10，可以如下操作：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sequence <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token operator">>></span><span class="token operator">></span> sequence<span class="token punctuation">[</span>None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">]</span></code></pre></li></ul><h3 id="2-2-5-成员资格"><a href="#2-2-5-成员资格" class="headerlink" title="2.2.5 成员资格"></a>2.2.5 成员资格</h3><p>要检查特定的值是否包含在序列中，可使用运算符in。这个运算符与前面讨论的运算符（如乘法或加法运算符）稍有不同。它检查是否满足指定的条件，并返回相应的值：满足时返回True，不满足时返回False。这样的运算符称为<strong>布尔运算符</strong>，而前述真值称为<strong>布尔值</strong>（第五章）。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> per <span class="token operator">=</span> <span class="token string">'rw'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'w'</span> <span class="token keyword">in</span> per<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'x'</span> <span class="token keyword">in</span> per<span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mlh'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> input<span class="token punctuation">(</span><span class="token string">'Enter your user name: '</span><span class="token punctuation">)</span> <span class="token keyword">in</span> users<span class="token comment" spellcheck="true">##可用于安全策略中的验证</span>Enter your user name<span class="token punctuation">:</span> mlh<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> subject <span class="token operator">=</span> <span class="token string">'$$$ Get rich now!!! $$$'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'rich'</span> <span class="token keyword">in</span> subject<span class="token comment" spellcheck="true">##可验证字符串是否为另一字符串的子串</span><span class="token boolean">True</span></code></pre><p><strong>长度、最小值和最大值</strong></p><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">len</td><td style="text-align:center">返回序列包含的元素个数</td></tr><tr><td style="text-align:center">max</td><td style="text-align:center">返回序列中最大的元素</td></tr><tr><td style="text-align:center">min</td><td style="text-align:center">返回序列中最小的元素</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">678</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token number">678</span><span class="token operator">>></span><span class="token operator">></span> min<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token number">34</span><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> min<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token comment" spellcheck="true">##最后两个表达式中，调用max和min时指定的实参并不是序列，而直接将数作为实参。</span></code></pre><h2 id="2-3-列表"><a href="#2-3-列表" class="headerlink" title="2.3 列表"></a>2.3 列表</h2><p>本节主要讨论列表不同于元组和字符串的地方——列表是可变的，即可修改其内容。</p><h3 id="2-3-1-函数-list"><a href="#2-3-1-函数-list" class="headerlink" title="2.3.1 函数 list"></a>2.3.1 函数 list</h3><p>鉴于不能像修改列表那样修改字符串，因此在有些情况下使用字符串来创建列表很有帮助。</p><ul><li>为此，可以使用函数 list。注意，可以将任何序列（而不仅仅时字符串）作为list的参数。</li><li>要将字符列表转换为字符串，可以使用 ‘’.join(somelist)。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> list<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">[</span><span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##''之间可以加入分隔符，如'/'.join(somelist)</span><span class="token string">'Hello'</span></code></pre></li></ul><h3 id="2-3-2-基本的列表操作"><a href="#2-3-2-基本的列表操作" class="headerlink" title="2.3.2 基本的列表操作"></a>2.3.2 基本的列表操作</h3><p>可对列表执行所有的标准序列操作，如索引、切片、拼接和相乘，但列表的特点在于它是可以修改的。本节为一些修改列表的方式：给元素赋值、删除元素、给切片赋值以及使用列表的方法。（注：并非所有的列表方法都会修改列表。）</p><h4 id="1-修改列表：给元素赋值"><a href="#1-修改列表：给元素赋值" class="headerlink" title="1.修改列表：给元素赋值"></a>1.修改列表：给元素赋值</h4><p>修改列表使用普通赋值语句即可，但是使用的是索引表示法来给特定位置的元素赋值，如：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##注意不能给不存在的元素赋值，因此如果列表长度为2，就不能给索引为100的元素赋值。</span></code></pre><h4 id="2-删除元素"><a href="#2-删除元素" class="headerlink" title="2.删除元素"></a>2.删除元素</h4><p>从列表中删除元素，使用del语句。del语句除用于删除列表元素，还可以用于字典乃至变量。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Beth'</span><span class="token punctuation">,</span> <span class="token string">'Cecil'</span><span class="token punctuation">,</span> <span class="token string">'Dee-Dee'</span><span class="token punctuation">,</span> <span class="token string">'Earl'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> names<span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Beth'</span><span class="token punctuation">,</span> <span class="token string">'Dee-Dee'</span><span class="token punctuation">,</span> <span class="token string">'Earl'</span><span class="token punctuation">]</span></code></pre><h4 id="3-给切片赋值"><a href="#3-给切片赋值" class="headerlink" title="3.给切片赋值"></a>3.给切片赋值</h4><ul><li>使用切片赋值，可以同时给多个元素赋值。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token string">'Perl'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> name<span class="token punctuation">[</span><span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token string">'ar'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> name<span class="token punctuation">[</span><span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">]</span></code></pre></li><li>使用切片赋值，可以将切片替换为长度与其不同的序列。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token string">'Perl'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token string">'ython'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> name<span class="token punctuation">[</span><span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">]</span></code></pre></li><li>使用切片赋值还可以在不替换原有元素的情况下插入新元素。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></code></pre></li><li>使用切片赋值还可以删除特定切片。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##本操作与del numbers[1:4]等效</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></code></pre></li></ul><h3 id="2-3-3-列表方法"><a href="#2-3-3-列表方法" class="headerlink" title="2.3.3 列表方法"></a>2.3.3 列表方法</h3><p>方法（第七章）是与对象（列表、数、字符串等）联系紧密的函数。通常使用object.method(arguments)来调用，方法调用与函数调用很想，只是在方法名前加上了对象和句点。</p><h4 id="1-append"><a href="#1-append" class="headerlink" title="1.append"></a>1.append</h4><p>方法append用于将一个对象附加到列表末尾。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##不给列表取名list的原因是list是Python的一个内置函数，如果给列表命名list，那么将无法使用list函数。</span><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></code></pre><p>注：append不会返回修改后的新列表，而是直接修改旧列表。</p><h4 id="2-clear"><a href="#2-clear" class="headerlink" title="2.clear"></a>2.clear</h4><p>方法clear就地清空列表的内容。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##类似于切片赋值语句 lst[:] = []</span><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><h4 id="3-copy"><a href="#3-copy" class="headerlink" title="3.copy"></a>3.copy</h4><p>方法copy复制列表。</p><ul><li>常规复制只是将另一个名称关联到列表：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> a<span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></code></pre></li><li>要将a和b指向不同的列表，就必须将b关联到a的副本：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> a<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##这类似于a[:]或list(a)，它们也都复制a。</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></code></pre></li></ul><h4 id="4-count"><a href="#4-count" class="headerlink" title="4.count"></a>4.count</h4><p>方法count计算指定的元素在列表中出现了多少次。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'to'</span><span class="token punctuation">,</span> <span class="token string">'be'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'to'</span><span class="token punctuation">,</span> <span class="token string">'be'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'to'</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">1</span></code></pre><h4 id="5-extend"><a href="#5-extend" class="headerlink" title="5.extend"></a>5.extend</h4><p>方法extend让你能够同时将多个值附加到列表末尾，为此可将这些值组成的序列作为参数提供给方法extend。换而言之，可以使用一个列表来扩展另一个列表。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span></code></pre><p>这种情况看起来类似于拼接，但存在一个重要差别，那就是将修改被拓展的序列，在常规拼接（a+b）中，情况是返回一个全新的序列。而如果要修改原序列，则可以使用a=a+b，但拼接的效率比extend低；也可以使用a[len(a):]=b来切片赋值，但可读性不高。</p><h4 id="6-index"><a href="#6-index" class="headerlink" title="6.index"></a>6.index</h4><p>方法index在列表中查找指定值第一次出现的索引。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> knights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'We'</span><span class="token punctuation">,</span> <span class="token string">'are'</span><span class="token punctuation">,</span> <span class="token string">'the'</span><span class="token punctuation">,</span> <span class="token string">'knights'</span><span class="token punctuation">,</span> <span class="token string">'who'</span><span class="token punctuation">,</span> <span class="token string">'say'</span><span class="token punctuation">,</span> <span class="token string">'ni'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> knights<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'who'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##找到指定值第一次出现的索引</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> knights<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'herring'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##未找到，所以报错</span>Traceback <span class="token punctuation">(</span>innermost last<span class="token punctuation">)</span><span class="token punctuation">:</span>File <span class="token string">"&lt;pyshell>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> ?knights<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'herring'</span><span class="token punctuation">)</span>ValueError<span class="token punctuation">:</span> list<span class="token punctuation">.</span>index<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> x <span class="token operator">not</span> <span class="token keyword">in</span> list</code></pre><h4 id="7-insert"><a href="#7-insert" class="headerlink" title="7.insert"></a>7.insert</h4><p>方法insert用于将一个对象插入列表。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span></code></pre><p>与extend一样，也可以用切片操作来获得与insert一样的效果，但是可读性无法与insert媲美。</p><h4 id="8-pop"><a href="#8-pop" class="headerlink" title="8.pop"></a>8.pop</h4><p>方法pop从列表中删除一个元素（末尾为最后一个元素），并返回这一元素。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##注：pop是唯一一个既修改列表又返回一个非None值的方法。</span></code></pre><p>可以使用pop实现一种常见的数据结构——栈（stack）。栈就像一叠盘子，最后加入的盘子最先取走，被称为先进后出（LIFO）。</p><p>push和pop是大家普遍接受的两种栈操作（加入和取走）的名称。Python没有提供push，但可以使用append来替代。方法pop和append的效果相反，因此将刚弹出的值压入（或附加）后，得到的栈将与原来相同。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></code></pre><h4 id="9-remove"><a href="#9-remove" class="headerlink" title="9.remove"></a>9.remove</h4><p>方法remove用于删除第一个为指定值的元素。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'to'</span><span class="token punctuation">,</span> <span class="token string">'be'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'to'</span><span class="token punctuation">,</span> <span class="token string">'be'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'be'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'to'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'to'</span><span class="token punctuation">,</span> <span class="token string">'be'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'bee'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##无法删除列表中不存在的元素。</span>Traceback <span class="token punctuation">(</span>innermost last<span class="token punctuation">)</span><span class="token punctuation">:</span>File <span class="token string">"&lt;pyshell>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> ?x<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'bee'</span><span class="token punctuation">)</span>ValueError<span class="token punctuation">:</span> list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> x <span class="token operator">not</span> <span class="token keyword">in</span> list<span class="token comment" spellcheck="true">##注：remove是就地修改且不返回值的方法之一。不同于pop的是，它修改列表，但不返回任何值。</span></code></pre><h4 id="10-reverse"><a href="#10-reverse" class="headerlink" title="10.reverse"></a>10.reverse</h4><p>方法reverse按相反的顺序排列列表中的元素。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##不返回值</span></code></pre><p>如果按照相反的顺序迭代序列，可使用函数reversed。这个函数不返回列表，而是返回一个迭代器（第九章）。可以使用list将返回的对象转换为列表。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> reversed<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&lt;</span>list_reverseiterator object at <span class="token number">0x000002DFAA1C5588</span><span class="token operator">></span><span class="token comment" spellcheck="true">##迭代器（(＠_＠;)? [不懂]）</span><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h4 id="11-sort"><a href="#11-sort" class="headerlink" title="11.sort"></a>11.sort</h4><p>方法sort用于对列表就地排序。就地排序意味着对原来的列表进行修改，使其元素按照顺序排列，而不是返回排序后的列表的副本。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span></code></pre><p>在需要排序后的列表副本并保留原始列表不变时，不能直接将x赋给y，因为这样x和y将指向同一个列表。以下为两种方法：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##先将y关联到x的副本，再对y进行排序：</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##使用函数sorted</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> sorted<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#注：实际上，这个函数可用于任何序列，但总是返回一个列表。</span><span class="token operator">>></span><span class="token operator">></span> sorted<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span></code></pre><p>如果要将元素按相反的顺序排列，可先使用sort（或sorted），再调用方法reverse，也可以使用参数reverse（下节）。</p><h4 id="12-高级排序"><a href="#12-高级排序" class="headerlink" title="12.高级排序"></a>12.高级排序</h4><p>方法sort接受两个可选参数：key和reverse。这两个参数通常是按照名称指定的，称为关键字参数（第六章）。参数key类似于参数cmp：你将其设置为一个用于排列的函数。然而，不会直接使用这个函数来判断一个元素是否比另一个元素小，而是使用它来为每个元素创建一个键，再根据这些键对元素进行排列。</p><ul><li>因此，要根据长度对元素进行排列，可将参数key设置为函数len。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'abalone'</span><span class="token punctuation">,</span> <span class="token string">'acme'</span><span class="token punctuation">,</span> <span class="token string">'add'</span><span class="token punctuation">,</span> <span class="token string">'aerate'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>len<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'add'</span><span class="token punctuation">,</span> <span class="token string">'acme'</span><span class="token punctuation">,</span> <span class="token string">'aerate'</span><span class="token punctuation">,</span> <span class="token string">'abalone'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">]</span></code></pre></li><li>对于另一个关键字参数reverse，只需要将其指定为一个真值（第五章），以指出是否要按相反的顺序对列表进行排列。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre>函数sorted也接受参数key和reverse。在很多情况下，将参数key设置为一个自定义函数（第六章）很有用。</li></ul><h2 id="2-4-元组：不可修改的序列"><a href="#2-4-元组：不可修改的序列" class="headerlink" title="2.4 元组：不可修改的序列"></a>2.4 元组：不可修改的序列</h2><p>与列表一样，元组也是序列，唯一的差别在于元组是不能修改的（字符串也不能修改）。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token comment" spellcheck="true">##将一些值用逗号分隔，即可创建一个元素</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##通常做法：将元组用圆括号括起</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##空元组</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">42</span><span class="token comment" spellcheck="true">##即使一个值的元组也必须加上逗号</span><span class="token number">42</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">42</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##有括号也要加逗号才可以创建元组，在元组的创建中逗号至关重要。</span><span class="token number">42</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">126</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span></code></pre><p>函数tuple的工作原理与list很像：它将一个序列作为参数，并将其转换为元组。如果参数已经是元组，就原封不动地返回它。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> tuple<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> tuple<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> tuple<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></code></pre><p>元组并不太复杂，而且除了创建和访问其元素外，可对元组执行的操作不多。元组的创建及其元素的访问方式与其他序列相同。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>元组的切片也是元组，就像列表的切片也是列表一样。为何要熟悉元组，原因如下：</p><ul><li>它们用作映射（第四章）中的键（以及集合的成员），而列表不行。</li><li>有些内置函数和方法返回元组。</li></ul><h2 id="2-5-小结"><a href="#2-5-小结" class="headerlink" title="2.5 小结"></a>2.5 小结</h2><ul><li>序列：序列是一种数据结构，其中的元素带编号（编号从0开始）。列表、字符串和元组都属于序列，其中列表是可变的，而元组和字符串是不可变的。要访问序列的一部分，可以使用切片操作：提供两个指定切片起始和结束位置的索引。要修改列表，可给其元素赋值，也可以使用赋值语句给切片赋值。</li><li>成员资格：要确定特定的值是否包含在序列（或其他容器）中，可使用运算符in。将运算符in用于字符串时情况比较特殊——这样可查找子串。</li><li>方法：一些内置类型（如列表和字符串，但不包括元组）提供了很多有用的方法。方法有点像函数，只是与特定的值相关联。方法是面向对象编程的一个重要方面（第七章）。</li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a><a href="https://github.com/ChenaniahLv/Python-Learning/tree/master/2Ch" target="_blank" rel="noopener">练习</a></h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 教程 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习第1章-快速上手：基础知识</title>
      <link href="/2019/02/13/python-xue-xi-di-1-zhang-kuai-su-shang-shou-ji-chu-zhi-shi/"/>
      <url>/2019/02/13/python-xue-xi-di-1-zhang-kuai-su-shang-shou-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-快速上手：基础知识"><a href="#第一章-快速上手：基础知识" class="headerlink" title="第一章-快速上手：基础知识"></a>第一章-快速上手：基础知识</h1><h2 id="1-1-交互式解释器"><a href="#1-1-交互式解释器" class="headerlink" title="1.1 交互式解释器"></a>1.1 交互式解释器</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world！"</span><span class="token punctuation">)</span></code></pre><p>可以输出hello world！</p><h2 id="1-2-算法是什么"><a href="#1-2-算法是什么" class="headerlink" title="1.2 算法是什么"></a>1.2 算法是什么</h2><p>算法由一些列必须按照一定顺序执行的操作说明组成，要素为<strong>对象</strong>和<strong>语句</strong>。</p><h2 id="1-3-数和表达式"><a href="#1-3-数和表达式" class="headerlink" title="1.3 数和表达式"></a>1.3 数和表达式</h2><ul><li>一般加减乘除操作即为简单的”+-*/“操作。</li><li>除法运算的结果为小数，即为浮点数。</li><li>如果想在除法运算中丢弃小数部分，即执行整数运算，可以使用双斜杠”//“。</li><li>求余数可以用求余（求模）运算符”%”</li><li>应该注意整数的除法运算为向下圆整的结果，例如：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span> <span class="token operator">//</span> <span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">//</span> <span class="token operator">-</span><span class="token number">3</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span></code></pre></li><li>乘方运算符为”**”，注：乘方运算符的优先级比求负（单目减）高，因此负数的乘方运算要加括号。</li><li>十六进制（0x）、八进制（0）和二进制（0b）表示都以0打头，例如：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0xAF</span><span class="token number">175</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">010</span><span class="token number">8</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0b1011010010</span><span class="token number">722</span></code></pre></li></ul><h2 id="1-4-变量"><a href="#1-4-变量" class="headerlink" title="1.4 变量"></a>1.4 变量</h2><p>变量是表示（或指示）特定值的名称，给变量赋予特定值的操作称为赋值，例如：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token number">6</span></code></pre><p>注：在Python中，名称（标识符）只能由字母、数字和下划线（_）构成，且不能以数字打头。因此在Python中Plan9是合法的变量名，而9Plan不是。</p><h2 id="1-5-语句"><a href="#1-5-语句" class="headerlink" title="1.5 语句"></a>1.5 语句</h2><p>表达式<strong>是</strong>一些东西，而语句<strong>做</strong>一些事情。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token comment" spellcheck="true">##表达式</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##语句，print实际上为一个函数，因此所说的print语句其实是函数调用。</span><span class="token number">4</span></code></pre><p>所有语句的根本特征：执行修改操作。例如，赋值语句改变变量，而print语句改变屏幕显示的外观。</p><h2 id="1-6-获取用户输入"><a href="#1-6-获取用户输入" class="headerlink" title="1.6 获取用户输入"></a>1.6 获取用户输入</h2><p>提供变量的值使用input函数，例如：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"x: "</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##括号中打印特定字符串以提示用户输入的信息。</span>x<span class="token punctuation">:</span> <span class="token number">34</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"y: "</span><span class="token punctuation">)</span>y<span class="token punctuation">:</span> <span class="token number">42</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> int<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1428</span></code></pre><h2 id="1-7-函数"><a href="#1-7-函数" class="headerlink" title="1.7 函数"></a>1.7 函数</h2><p>函数犹如小型程序，可以用来执行特定的操作，例如乘方操作除了使用表达式”**”外，亦可以使用函数pow来实现：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">8</span></code></pre><p>像这样使用函数称为调用函数：你向他提供实参，而它返回一个值。鉴于函数调用返回一个值，因此它们也是表达式。</p><p>另常用函数如abs计算绝对值，round将浮点数圆整为与之最接近的整数：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">10</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> round<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">1</span></code></pre><h2 id="1-8-模块"><a href="#1-8-模块" class="headerlink" title="1.8 模块"></a>1.8 模块</h2><p>可将模块视为扩展，通过将其导入可以扩展Python功能。要导入特殊模块，可以使用特殊命令import。我们使用import导入模块，再以module.function的方式使用模块中的函数。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> math<span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">32.9</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##floor返回小于或等于给定数的最小整数，相当于int(32.9)</span><span class="token number">32</span><span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token number">32.3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##ceil返回大于或等于给定数的最小整数</span><span class="token number">33</span></code></pre><p>如果确定不会从不同模块导入多个同名函数，并且不想在每次调用函数时都制定模块名，在这种情况下，可以使用命令import的如下变种：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt<span class="token comment" spellcheck="true">##通过使用命令import的变种from module import funtion，可在调用函数时不制定模块前缀。</span><span class="token operator">>></span><span class="token operator">></span> sqrt<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token number">3.0</span></code></pre><p>另外，可以使用变量来引用函数（以及其他大部分Python元素）。执行赋值语句foo = math.sqrt后，就可使用foo来计算平方根。例如，foo(4)的结果为2.0。</p><h3 id="cmath和复数"><a href="#cmath和复数" class="headerlink" title="cmath和复数"></a><strong>cmath和复数</strong></h3><p>如果坚持将值域限定为实数，并使用其近似的浮点数实现，就无法计算复数的平方根。复数的平方根为序数，而由实部和虚部组成的数为复数。Python标准库中提供了一个专门用于处理复数的模块。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">import</span> cmath<span class="token operator">>></span><span class="token operator">></span>cmath<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##注意到这里没有使用from...import...。如果使用了这种import命令，将无法使用常规函数。类似这样的名称冲突很隐蔽，因此除非必须使用from版的import命令，否则应坚持使用常规版import命令。</span><span class="token number">1j</span></code></pre><p>Python本身提供了对复数的支持（即使不使用import cmath也可以计算复数），但是Python没有专门表示虚数的类型，而将虚数视为实部为零的复数。</p><h2 id="1-9-保存并执行程序"><a href="#1-9-保存并执行程序" class="headerlink" title="1.9 保存并执行程序"></a>1.9 保存并执行程序</h2><p>新建一个拓展名为.py的文件，编写代码后保存运行。</p><h3 id="1-9-1-从命令提示符运行Python脚本"><a href="#1-9-1-从命令提示符运行Python脚本" class="headerlink" title="1.9.1 从命令提示符运行Python脚本"></a>1.9.1 从命令提示符运行Python脚本</h3><p>可以在终端中键入python filename.py来运行Python代码。</p><h3 id="1-9-2-让脚本像普通程序一样"><a href="#1-9-2-让脚本像普通程序一样" class="headerlink" title="1.9.2 让脚本像普通程序一样"></a>1.9.2 让脚本像普通程序一样</h3><p>在Windows中，为了看清Python代码文件的运行结果，可以在代码末尾添加如下代码行：</p><pre class=" language-python"><code class="language-python">input<span class="token punctuation">(</span><span class="token string">"press &lt;enter>"</span><span class="token punctuation">)</span></code></pre><p>即可在看清代码运行结果后按回车键关闭窗口。</p><h3 id="1-9-3-注释"><a href="#1-9-3-注释" class="headerlink" title="1.9.3 注释"></a>1.9.3 注释</h3><p>即在代码中以#开头解释代码行，#后到行尾的所有内容都将被忽略。</p><h2 id="1-10-字符串"><a href="#1-10-字符串" class="headerlink" title="1.10 字符串"></a>1.10 字符串</h2><p>字符串用途众多，但主要用途是表示一段文本。</p><h3 id="1-10-1-单引号字符串以及对引号转义"><a href="#1-10-1-单引号字符串以及对引号转义" class="headerlink" title="1.10.1 单引号字符串以及对引号转义"></a>1.10.1 单引号字符串以及对引号转义</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Hello world!"</span><span class="token string">'Hello world!'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Hello world!'</span><span class="token string">'Hello world!'</span></code></pre><p>在打印字符串时，单双引号并没有差别。但是，当引号是字符串的一部分时，对单双引号的使用便有了特定要求，或者可以对字符串中的引号进行转义。例如：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Let's go!"</span><span class="token comment" spellcheck="true">##字符串中有单引号，故两端只能使用双引号。</span><span class="token string">"Let's go!"</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'"Hello,world!" she said'</span><span class="token comment" spellcheck="true">##字符串中有双引号，故两端只能使用单引号。</span><span class="token string">'"Hello,world!" she said'</span><span class="token comment" spellcheck="true">##或者可以对字符串中的引号进行转义。</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Let\'s go!'</span><span class="token string">"Let's go!"</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"\"Hello,world!\" she said"</span><span class="token string">'"Hello,world!" she said'</span><span class="token comment" spellcheck="true">##如果不喜欢用反斜杠，可以通过使用长字符串和原始字符串来避免使用\</span></code></pre><h3 id="1-10-2-拼接字符串"><a href="#1-10-2-拼接字符串" class="headerlink" title="1.10.2 拼接字符串"></a>1.10.2 拼接字符串</h3><ul><li>可以<em>同时依次</em>输入两个字符串来使两字符串拼接。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Let's say "</span> <span class="token string">'"Hello, world!"'</span><span class="token string">'Let\'s say "Hello, world!"'</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token string">"Hello, "</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> <span class="token string">"world!"</span><span class="token operator">>></span><span class="token operator">></span> x ySyntaxError<span class="token punctuation">:</span> invalid syntax</code></pre></li><li>可以（通过变量）替代字符串，通过相加来使两字符串拼接。<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> <span class="token string">"world!"</span><span class="token string">'Hello world!'</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token string">"Hello, "</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> <span class="token string">"world!"</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">+</span> y'Hello<span class="token punctuation">,</span> world!"</code></pre></li></ul><h3 id="1-10-3-字符串表示-str-和-repr"><a href="#1-10-3-字符串表示-str-和-repr" class="headerlink" title="1.10.3 字符串表示 str 和 repr"></a>1.10.3 字符串表示 str 和 repr</h3><p>Python在打印的所有字符串都有引号括起，但是在使用 print 函数时，字符串将没有引号括起，如果再加上表示换行符的编码\n，差别将更加明显。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Hello,\nworld!"</span><span class="token string">'Hello,\nworld!'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello,\nworld!"</span><span class="token punctuation">)</span>Hello<span class="token punctuation">,</span>world!</code></pre><p>通过两种不同的机制将值转换成了字符串。你可以通过使用函数str和repr直接使用这两种机制。使用str能以合理的方式将值转换成用户能够看懂的字符串。例如，尽可能将特殊字符编码转换为相应的字符。然而，使用repr时，通常会获得值的合法Python表达式表示。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span><span class="token string">"Hello,\nworld!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'Hello,\nworld!'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token string">"Hello,\nworld!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Hello<span class="token punctuation">,</span>world!</code></pre><h3 id="1-10-4-长字符串、原始字符串和字节"><a href="#1-10-4-长字符串、原始字符串和字节" class="headerlink" title="1.10.4 长字符串、原始字符串和字节"></a>1.10.4 长字符串、原始字符串和字节</h3><h4 id="1-长字符串"><a href="#1-长字符串" class="headerlink" title="1.长字符串"></a>1.长字符串</h4><p>要表示很长的字符串（跨越多行的字符串），可使用三引号（而不是普通引号）或三个双引号。这让解释器能够识别表示字符串开始和结束位置的引号，因此字符串本身可包含单引号和双引号，无需使用反斜杠进行转义。</p><p><em>常规字符串也可横跨多行。只要在行尾加上反斜杠，反斜杠和换行符将被转义，即被忽略。这种处理手法也适用于表达式和语句。</em></p><h4 id="2-原始字符串"><a href="#2-原始字符串" class="headerlink" title="2.原始字符串"></a>2.原始字符串</h4><ul><li>原始字符串不以特殊方式处理反斜杠，因此在有些情况下很有用。在常规字符串中，反斜杠扮演着特殊角色：它对字符进行转义，让你能够在字符串中包含原本无法包含的字符。</li><li>在大量使用反斜杠转义字符的场合，可以使用原始字符（用前缀r表示），因为它们不会对反斜杠做特殊处理，而是让字符串包含的每个字符都保持原样。如：<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'C:\Program Files\fnord\foo\bar\baz\frozz\bazz'</span><span class="token punctuation">)</span>  C<span class="token punctuation">:</span>\Program Files\fnord\foo\bar\baz\frozz\bazz</code></pre></li><li>注意：<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##(1)引号需要像通常那样进行转义，但这意味着用于执行转义的反斜杠也将包含在最终的字符串中；</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'Let\'s go!'</span><span class="token punctuation">)</span>Let\<span class="token string">'s go!'</span><span class="token comment" spellcheck="true">#（本行后一个'多余）</span><span class="token comment" spellcheck="true">##(2)原始字符串不能以单个反斜杠结尾，除非对其进行转义，如果指定以反斜杠结尾的原始字符串，基本技巧是将反斜杠单独作为一个字符串：</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'C:\Program Files\fnord\foo\bar'</span> <span class="token string">'\\'</span><span class="token punctuation">)</span>C<span class="token punctuation">:</span>\Program Files\fnord\foo\bar\<span class="token comment" spellcheck="true">##注意：在制定原始字符串时，可使用单引号或双引号将其括起，还可使用三引号将其括起。</span></code></pre></li></ul><h4 id="3-Unicode、bytes和bytearray"><a href="#3-Unicode、bytes和bytearray" class="headerlink" title="3.Unicode、bytes和bytearray"></a>3.Unicode、bytes和bytearray</h4><ul><li>Python字符串使用Unicode编码来表示文本。大致而言，每个Unicode字符都用一个码点（code point）表示，而码点是Unicode标准给每个字符制定的数字。指定Unicode字符的通用机制为：使用16或32位的十六进制字面量（分别加上前缀\u或\U）或者使用字符的Unicode名称（\N{name}）。</li><li>Python bytes字面量只支持ASCII标准中的128个字符，而余下的128个值必须用转义序列来表示。Unicode与ASCII在字母表规模不同。</li><li>Python还提供了bytearray，它是bytes的可变版。</li></ul><h2 id="1-11-小结"><a href="#1-11-小结" class="headerlink" title="1.11 小结"></a>1.11 小结</h2><ul><li>算法：从本质上说，编写计算机程序就是使用计算机能够理解的语言描述一种算法。这种对机器友好的描述被称为程序，主要由表达式和语句组成。</li><li>表达式：表达式为程序的一部分，结果为一个值。简单表达式是使用运算符和函数将字面值组合起来得到的。通过组合简单的表达式，可创建复杂的表达式。表达式还可能包含变量。</li><li>变量：变量是表示值的名称。通过赋值，可将新值赋给变量。赋值是一种语句。</li><li>函数：类似数学函数，它们可以接受参数，并返回结果。</li><li>模块：模块是扩展，可通过导入它们来扩展Python的功能。</li><li>程序：编写、保存和运行Python程序。</li><li>字符串：字符串是用Unicode码点表示的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 教程 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/02/13/hello-world/"/>
      <url>/2019/02/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
